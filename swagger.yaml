swagger: '2.0'
info:
  description: >
    QuantiModo makes it easy to retrieve normalized user data from a wide array
    of devices and applications. [Learn about QuantiModo](https://quantimo.do)
    or contact us at api@quantimo.do.  

    Before you get started, you will need to:   

    - Sign in/Sign up, and add some data at
    [https://app.quantimo.do](https://app.quantimo.do) to try out the API for
    yourself

    * Create an app to get your client id and secret at
    [https://app.quantimo.do/api/v2/apps](https://app.quantimo.do/api/v2/apps)

    ### Getting Application Token Make a `POST` request to
    `/api/v2/oauth/access_token`
     * `grant_type` Must be `client_credentials`.
     * `client_id` Your application's clientId.
     * `client_secret` Your application's client_secret.
     * `redirect_uri` Your application's redirect url.
     
    ## Example Queries

    ### Query Options

    The standard query options for QuantiModo API are as described below. These
    are the available query options in QuantiModo API:

    - limit: The LIMIT is used to limit the number of results returned. So if
    you have 1000 results, but only want to the first 10, you would set this to
    10 and offset to 0. The maximum limit is 200 records.  

    - offset: Suppose you wanted to show results 11-20. You'd set the offset to
    10 and the limit to 10.

    - sort: Sort by given field. If the field is prefixed with '-', it will sort
    in descending order.

    ### Pagination Conventions

    Since the maximum limit is 200 records, to get more than that you'll have to
    make multiple API calls and page through the results. To retrieve all the
    data, you can iterate through data by using the `limit` and `offset` query
    parameters.  


    For example, if you want to retrieve data from 61-80 then you can use a
    query with the following parameters, `/v2/variables?limit=20&offset=60`.  


    Generally, you'll be retrieving new or updated user data. To avoid
    unnecessary API calls, you'll want to store your last refresh time locally.
    Initially, it should be set to 0. Then whenever you make a request to get
    new data, you should limit the returned results to those updated since your
    last refresh by appending append
    `?lastUpdated=(ge)&quot2013-01-D01T01:01:01&quot` to your request.

    ### Filter operators support

    The API supports the following operators with filter parameters:


    **Comparison operators** 


    Comparison operators allow you to limit results to those greater than, less
    than, or equal to specified value for a specifiedattribute. These operators
    can be used with strings, numbers, and dates. 

    The following comparison operators are available:  

    * `gt` for `greater than` comparison

    * `ge` for `greater than or equal` comparison

    * `lt` for `less than` comparison

    * `le` for `less than or equal` comparison  


    They are included in queries using the following format:
    `(<operator>)<value>`   

    For example, in order to filter value which is greater than 21, the
    following query parameter should be used: `?value=(gt)21`  


    **Equals/In Operators**  
     
    It also allows filtering by the exact value of an attribute or by a set of
    values, depending on the type of value passed as a query parameter. If the
    value contains commas, the parameter is split on commas and used as array
    input for `IN` filtering, otherwise the exact match is applied.   


    In order to only show records which have the value 42, the following query
    should be used: `?value=42` 


    In order to filter records which have value 42 or 43, the following query
    should be used: `?value=42,43`  


    **Like operators**   


    Like operators allow filtering using `LIKE` query. This operator is
    triggered if exact match operator is used, but value contains `%` sign as
    the first or last character. 

    In order to filter records which category that start with `Food`, the
    following query should be used: `?category=Food%`  


    **Negation operator**    


    It is possible to get negated results of a query by prefixed the operator
    with `!`. 

    Some examples: 

    filter records except those with value are not 42 or 43: `?value=!42,43` 


    filter records with value not greater than 21: `?value=!(ge)21`  


    **Multiple constraints for single attribute**    


    It is possible to apply multiple constraints by providing an array of query
    filters. 


    To filter all records which value is greater than 20.2 and less than 20.3: 


    `?value[]=(gt)20.2&value[]=(lt)20.3`   


    Filter all records which value is greater than 20.2 and less than 20.3 but
    not 20.2778 


    `?value[]=(gt)20.2&value[]=(lt)20.3&value[]=!20.2778`
  version: '2.0'
  title: QuantiModo
  termsOfService: 'https://quantimo.do/terms/'
  contact:
    name: info@quantimo.do
basePath: /api
host: app.quantimo.do
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1/integration.js:
    get:
      tags:
        - connectors
      summary: Get embeddable connect javascript
      description: |-
        Get embeddable connect javascript. Usage:
          - Embedding in applications with popups for 3rd-party authentication
        windows.
            Use `qmSetupInPopup` function after connecting `connect.js`.
          - Embedding in applications with popups for 3rd-party authentication
        windows.
            Requires a selector to block. It will be embedded in this block.
            Use `qmSetupOnPage` function after connecting `connect.js`.
          - Embedding in mobile applications without popups for 3rd-party
        authentication.
            Use `qmSetupOnMobile` function after connecting `connect.js`.
            If using in a Cordova application call  `qmSetupOnIonic` function after connecting `connect.js`.
      produces:
        - application/x-javascript
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
      responses:
        '200':
          description: Embeddable connect javascript was returned
  /v1/connect/mobile:
    get:
      tags:
        - connectors
      summary: Mobile connect page
      description: >-
        This page is designed to be opened in a webview.  Instead of using popup
        authentication boxes, it uses redirection. You can include the user's
        access_token as a URL parameter like
        https://app.quantimo.do/api/v1/connect/mobile?access_token=123
      produces:
        - text/html
      parameters:
        - in: query
          name: access_token
          description: User OAuth access token
          required: true
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
      responses:
        '200':
          description: Mobile connect page was returned
        '401':
          description: User token is missing
        '403':
          description: User token is incorrect
  /v1/connectors/list:
    get:
      tags:
        - connectors
      summary: List of Connectors
      description: >-
        A connector pulls data from other data providers using their API or a
        screenscraper. Returns a list of all available connectors and
        information about them such as their id, name, whether the user has
        provided access, logo url, connection instructions, and the update
        history.
      produces:
        - application/json
      responses:
        '200':
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Connector'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/connectors/{connector}/connect':
    get:
      tags:
        - connectors
      summary: Obtain a token from 3rd party data source
      description: >-
        Attempt to obtain a token from the data provider, store it in the
        database. With this, the connector to continue to obtain new user data
        until the token is revoked.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: path
          name: connector
          description: >-
            Lowercase system name of the source application or device. Get a
            list of available connectors from the /v1/connectors/list endpoint.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
        '401':
          description: Not Authenticated
        '404':
          description: Method not found. Could not execute the requested method.
        '500':
          description: Error during update. Unsupported response from update().
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/connectors/{connector}/connectParameter':
    get:
      tags:
        - connectors
      summary: Connect Parameter
      description: >-
        Returns instructions that describe what parameters and endpoint to use
        to connect to the given data provider.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: path
          name: connector
          description: >-
            Lowercase system name of the source application or device. Get a
            list of available connectors from the /v1/connectors/list endpoint.
          required: true
          type: string
        - in: query
          name: defaultValue
          description: Default parameter value
          required: false
          type: string
        - in: query
          name: displayName
          description: Name of the parameter that is user visible in the form
          required: true
          type: string
        - in: query
          name: key
          description: >-
            Name of the property that the user has to enter such as username or
            password Connector (used in HTTP request)
          required: true
          type: string
        - in: query
          name: placeholder
          description: Placeholder hint value for the parameter input tag.
          required: true
          type: string
        - in: query
          name: type
          description: >-
            Type of input field such as those found here
            http://www.w3schools.com/tags/tag_input.asp
          required: true
          type: string
        - in: query
          name: usePopup
          description: Should use popup when enabling connector
          required: true
          type: boolean
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ConnectorInstruction'
        '401':
          description: Not Authenticated
        '404':
          description: Method not found. Could not execute the requested method.
        '500':
          description: Error during update. Unsupported response from update().
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/connectors/{connector}/connectInstructions':
    get:
      tags:
        - connectors
      summary: Connection Instructions
      description: >-
        Returns instructions that describe what parameters and endpoint to use
        to connect to the given data provider.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: path
          name: connector
          description: >-
            Lowercase system name of the source application or device. Get a
            list of available connectors from the /v1/connectors/list endpoint.
          required: true
          type: string
        - in: query
          name: parameters
          description: JSON Array of Parameters for the request to enable connector.
          required: true
          type: string
        - in: query
          name: url
          description: URL which should be used to enable the connector.
          required: true
          type: string
        - in: query
          name: usePopup
          description: Should use popup when enabling connector
          required: true
          type: boolean
      responses:
        '200':
          description: Successful operation
        '401':
          description: Not Authenticated
        '404':
          description: Method not found. Could not execute the requested method.
        '500':
          description: Error during update. Unsupported response from update().
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/connectors/{connector}/disconnect':
    get:
      tags:
        - connectors
      summary: Delete stored connection info
      description: >-
        The disconnect method deletes any stored tokens or connection
        information from the connectors database.
      produces:
        - application/json
      parameters:
        - in: path
          name: connector
          description: >-
            Lowercase system name of the source application or device. Get a
            list of available connectors from the /v1/connectors/list endpoint.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
        '401':
          description: Not Authenticated
        '404':
          description: Method not found. Could not execute the requested method.
        '500':
          description: Error during update. Unsupported response from update().
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/connectors/{connector}/info':
    get:
      tags:
        - connectors
      summary: Get connector info for user
      description: >-
        Returns information about the connector such as the connector id,
        whether or not is connected for this user (i.e. we have a token or
        credentials), and its update history for the user.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: path
          name: connector
          description: >-
            Lowercase system name of the source application or device. Get a
            list of available connectors from the /v1/connectors/list endpoint.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ConnectorInfo'
        '401':
          description: Not Authenticated
        '404':
          description: Method not found. Could not execute the requested method.
        '500':
          description: Error during update. Please contact info@quantimo.do.
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/connectors/{connector}/update':
    get:
      tags:
        - connectors
      summary: Sync with data source
      description: >-
        The update method tells the QM Connector Framework to check with the
        data provider (such as Fitbit or MyFitnessPal) and retrieve any new
        measurements available.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: path
          name: connector
          description: Lowercase system name of the source application or device
          required: true
          type: string
      responses:
        '200':
          description: Connection Successful
        '401':
          description: Not Authenticated
        '404':
          description: Method not found. Could not execute the requested method.
        '500':
          description: Error during update. Unsupported response from update().
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/correlations:
    get:
      tags:
        - correlations
      summary: Get correlations
      description: Get correlations based on data from a single user.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: effect
          description: >-
            ORIGINAL variable name of the effect variable for which the user
            desires correlations
          required: false
          type: string
        - in: query
          name: cause
          description: >-
            ORIGINAL variable name of the cause variable for which the user
            desires correlations
          required: false
          type: string
        - in: query
          name: correlationCoefficient
          description: >-
            Pearson correlation coefficient between cause and effect after
            lagging by onset delay and grouping by duration of action
          required: false
          type: string
        - in: query
          name: onsetDelay
          description: >-
            The amount of time in seconds that elapses after the
            predictor/stimulus event before the outcome as perceived by a
            self-tracker is known as the “onset delay”. For example, the “onset
            delay” between the time a person takes an aspirin
            (predictor/stimulus event) and the time a person perceives a change
            in their headache severity (outcome) is approximately 30 minutes.
          required: false
          type: string
        - in: query
          name: durationOfAction
          description: >-
            The amount of time over which a predictor/stimulus event can exert
            an observable influence on an outcome variable’s value. For
            instance, aspirin (stimulus/predictor) typically decreases headache
            severity for approximately four hours (duration of action) following
            the onset delay.
          required: false
          type: string
        - in: query
          name: lastUpdated
          description: >-
            The time that this measurement was last updated in the UTC format
            "YYYY-MM-DDThh:mm:ss"
          required: false
          type: string
        - in: query
          name: limit
          description: >-
            The LIMIT is used to limit the number of results returned. So if you
            have 1000 results, but only want to the first 10, you would set this
            to 10 and offset to 0.
          required: false
          type: integer
        - in: query
          name: offset
          description: >-
            Now suppose you wanted to show results 11-20. You'd set the offset
            to 10 and the limit to 10.
          required: false
          type: integer
        - in: query
          name: sort
          description: >-
            Sort by given field. If the field is prefixed with `-, it will sort
            in descending order.
          required: false
          type: integer
        - in: query
          name: outcomesOfInterest
          description: >-
            Only include correlations for which the effect is an outcome of
            interest for the user
          required: false
          type: boolean
      responses:
        '200':
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Correlation'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/aggregatedCorrelations:
    get:
      tags:
        - correlations
      summary: Get aggregated correlations
      description: >-
        Get correlations based on the anonymized aggregate data from all
        QuantiModo users.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: effect
          description: >-
            ORIGINAL variable name of the effect variable for which the user
            desires correlations
          required: false
          type: string
        - in: query
          name: cause
          description: >-
            ORIGINAL variable name of the cause variable for which the user
            desires correlations
          required: false
          type: string
        - in: query
          name: correlationCoefficient
          description: >-
            Pearson correlation coefficient between cause and effect after
            lagging by onset delay and grouping by duration of action
          required: false
          type: string
        - in: query
          name: onsetDelay
          description: >-
            The amount of time in seconds that elapses after the
            predictor/stimulus event before the outcome as perceived by a
            self-tracker is known as the “onset delay”. For example, the “onset
            delay” between the time a person takes an aspirin
            (predictor/stimulus event) and the time a person perceives a change
            in their headache severity (outcome) is approximately 30 minutes.
          required: false
          type: string
        - in: query
          name: durationOfAction
          description: >-
            The amount of time over which a predictor/stimulus event can exert
            an observable influence on an outcome variable’s value. For
            instance, aspirin (stimulus/predictor) typically decreases headache
            severity for approximately four hours (duration of action) following
            the onset delay.
          required: false
          type: string
        - in: query
          name: lastUpdated
          description: >-
            The time that this measurement was last updated in the UTC format
            "YYYY-MM-DDThh:mm:ss"
          required: false
          type: string
        - in: query
          name: limit
          description: >-
            The LIMIT is used to limit the number of results returned. So if you
            have 1000 results, but only want to the first 10, you would set this
            to 10 and offset to 0.
          required: false
          type: integer
        - in: query
          name: offset
          description: >-
            Now suppose you wanted to show results 11-20. You'd set the offset
            to 10 and the limit to 10.
          required: false
          type: integer
        - in: query
          name: sort
          description: >-
            Sort by given field. If the field is prefixed with `-, it will sort
            in descending order.
          required: false
          type: integer
        - in: query
          name: outcomesOfInterest
          description: >-
            Only include correlations for which the effect is an outcome of
            interest for the user
          required: false
          type: boolean
      responses:
        '200':
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Correlation'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
    post:
      tags:
        - correlations
      summary: Store or Update a Correlation
      description: Add correlation
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: body
          name: body
          description: Provides correlation data
          required: true
          schema:
            $ref: '#/definitions/PostCorrelation'
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/JsonErrorResponse'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/public/correlations/search/{search}':
    get:
      tags:
        - correlations
      summary: Get average correlations for variables containing search term
      description: >-
        Returns the average correlations from all users for all public variables
        that contain the characters in the search query. Returns average of all
        users public variable correlations with a specified cause or effect.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: path
          name: search
          description: Name of the variable that you want to know the causes or effects of.
          required: true
          type: string
        - in: query
          name: effectOrCause
          description: >-
            Setting this to effect indicates that the searched variable is the
            effect and that the causes of this variable should be returned.
            cause indicates that the searched variable is the cause and the
            effects should be returned.
          required: true
          type: string
        - in: query
          name: outcomesOfInterest
          description: >-
            Only include correlations for which the effect is an outcome of
            interest for the user
          required: false
          type: boolean
      responses:
        '200':
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Correlation'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/variables/{variableName}/public/causes':
    get:
      tags:
        - correlations
      summary: Search public correlations for a given effect
      description: >-
        Returns average of all correlations and votes for all public cause
        variables for a given effect
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: correlationCoefficient
          description: >-
            You can use this to get causes with correlations greater than or
            less than 0
          required: false
          type: string
        - in: path
          name: variableName
          description: Effect variable name
          required: true
          type: string
      responses:
        '200':
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Correlation'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/variables/{variableName}/public/effects':
    get:
      tags:
        - correlations
      summary: Search public correlations for a given cause
      description: >-
        Returns average of all correlations and votes for all public cause
        variables for a given cause
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: path
          name: variableName
          description: Cause variable name
          required: true
          type: string
      responses:
        '200':
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Correlation'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/variables/{variableName}/causes':
    get:
      tags:
        - correlations
      summary: Search user correlations for a given effect
      description: >-
        Returns average of all correlations and votes for all user cause
        variables for a given effect
      produces:
        - application/json
      parameters:
        - in: path
          name: variableName
          description: Effect variable name
          required: true
          type: string
      responses:
        '200':
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Correlation'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/variables/{variableName}/effects':
    get:
      tags:
        - correlations
      summary: Search user correlations for a given cause
      description: >-
        Returns average of all correlations and votes for all user effect
        variables for a given cause
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: correlationCoefficient
          description: >-
            You can use this to get effects with correlations greater than or
            less than 0
          required: false
          type: string
        - in: path
          name: variableName
          description: Cause variable name
          required: true
          type: string
      responses:
        '200':
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Correlation'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/causes':
    get:
      tags:
        - correlations
      summary: Search user correlations for a given cause
      description: >-
        Returns average of all correlations and votes for all user cause
        variables for a given cause. If parameter "include_public" is used, it
        also returns public correlations. User correlation overwrites or
        supersedes public correlation.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: path
          name: organizationId
          description: Organization ID
          required: true
          type: integer
        - in: path
          name: userId
          description: User id
          required: true
          type: integer
        - in: path
          name: variableName
          description: Effect variable name
          required: true
          type: string
        - in: query
          name: organization_token
          description: Organization access token
          required: true
          type: string
        - in: query
          name: includePublic
          description: 'Include public correlations, Can be "1" or empty.'
          required: false
          type: string
      responses:
        '200':
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Correlation'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/effects':
    get:
      tags:
        - correlations
      summary: Search user correlations for a given cause
      description: >-
        Returns average of all correlations and votes for all user cause
        variables for a given effect. If parameter "include_public" is used, it
        also returns public correlations. User correlation overwrites or
        supersedes public correlation.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: path
          name: organizationId
          description: Organization ID
          required: true
          type: integer
        - in: path
          name: userId
          description: User id
          required: true
          type: integer
        - in: path
          name: variableName
          description: Cause variable name
          required: true
          type: string
        - in: query
          name: organization_token
          description: Organization access token
          required: true
          type: string
        - in: query
          name: include_public
          description: 'Include public correlations, Can be "1" or empty.'
          required: false
          type: string
      responses:
        '200':
          description: Successful Operation
          schema:
            type: array
            items:
              $ref: '#/definitions/CommonResponse'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/measurements:
    get:
      tags:
        - measurements
      summary: Get measurements for this user
      description: >-
        Measurements are any value that can be recorded like daily steps, a mood
        rating, or apples eaten. Supported filter
        parameters:<ul><li><b>value</b> - Value of
        measurement</li><li><b>lastUpdated</b> - The time that this measurement
        was created or last updated in the UTC format
        "YYYY-MM-DDThh:mm:ss"</li></ul>
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: id
          description: Measurement id
          required: false
          type: integer
        - in: query
          name: variableName
          description: Name of the variable you want measurements for
          required: false
          type: string
        - in: query
          name: variableCategoryName
          description: Name of the variable category you want measurements for
          required: false
          type: string
        - in: query
          name: sourceName
          description: >-
            ID of the source you want measurements for (supports exact name
            match only)
          required: false
          type: string
        - in: query
          name: value
          description: Value of measurement
          required: false
          type: string
        - in: query
          name: unitAbbreviatedName
          description: The unit you want the measurements returned in
          required: false
          type: string
        - in: query
          name: earliestMeasurementTime
          description: >-
            The lower limit of measurements returned in ISO 8601 format or epoch
            seconds (unixtime)
          required: false
          type: string
        - in: query
          name: latestMeasurementTime
          description: >-
            The upper limit of measurements returned in ISO 8601 format or epoch
            seconds (unixtime)
          required: false
          type: string
        - in: query
          name: createdAt
          description: >-
            The time the measurement record was first created in the format
            YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
          required: false
          type: string
        - in: query
          name: updatedAt
          description: >-
            The time the measurement record was last changed in the format
            YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
          required: false
          type: string
        - in: query
          name: groupingWidth
          description: The time (in seconds) over which measurements are grouped together
          required: false
          type: integer
        - in: query
          name: groupingTimezone
          description: The time (in seconds) over which measurements are grouped together
          required: false
          type: string
        - in: query
          name: limit
          description: >-
            The LIMIT is used to limit the number of results returned. So if you
            have 1000 results, but only want to the first 10, you would set this
            to 10 and offset to 0.
          required: false
          type: integer
        - in: query
          name: offset
          description: >-
            Now suppose you wanted to show results 11-20. You'd set the offset
            to 10 and the limit to 10.
          required: false
          type: integer
        - in: query
          name: sort
          description: >-
            Sort by given field. If the field is prefixed with `-, it will sort
            in descending order.
          required: false
          type: integer
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/Measurement'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - readmeasurements
    post:
      tags:
        - measurements
      summary: Post a new set or update existing measurements to the database
      description: >-
        You can submit or update multiple measurements in a "measurements"
        sub-array.  If the variable these measurements correspond to does not
        already exist in the database, it will be automatically added.  The
        request body should look something like
        [{"measurements":[{"startTime":1439389320,"value":"3"},
        {"startTime":1439389319,"value":"2"}],"name":"Acne (out of
        5)","source":"QuantiModo","category":"Symptoms","combinationOperation":"MEAN","unit":"/5"}]
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: body
          name: body
          description: An array of measurements you want to insert.
          required: true
          schema:
            $ref: '#/definitions/MeasurementSet'
      responses:
        '200':
          description: Measurements successfully stored
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - writemeasurements
  /v1/measurements/delete:
    post:
      tags:
        - measurements
      summary: Delete a measurement
      description: Delete a previously submitted measurement
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The startTime and variableId of the measurement to be deleted.
          required: true
          schema:
            $ref: '#/definitions/MeasurementDelete'
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/CommonResponse'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - writemeasurements
  /v1/measurements/update:
    post:
      tags:
        - measurements
      summary: Update a measurement
      description: Delete a previously submitted measurement
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: >-
            The id as well as the new startTime, note, and/or value of the
            measurement to be updated
          required: true
          schema:
            $ref: '#/definitions/MeasurementUpdate'
      responses:
        '201':
          description: Successful Operation
          schema:
            $ref: '#/definitions/CommonResponse'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/measurements/daily:
    get:
      tags:
        - measurements
      summary: Get daily measurements for this user
      description: >-
        Measurements are any value that can be recorded like daily steps, a mood
        rating, or apples eaten. Supported filter
        parameters:<ul><li><b>value</b> - Value of
        measurement</li><li><b>lastUpdated</b> - The time that this measurement
        was created or last updated in the UTC format
        "YYYY-MM-DDThh:mm:ss"</li></ul>
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: variableName
          description: Name of the variable you want measurements for
          required: true
          type: string
        - in: query
          name: unitAbbreviatedName
          description: The unit your want the measurements in
          required: false
          type: string
        - in: query
          name: startTime
          description: >-
            The lower limit of measurements returned (UTC Iso8601
            "YYYY-MM-DDThh:mm:ss" format)
          required: false
          type: string
        - in: query
          name: endTime
          description: >-
            The upper limit of measurements returned (UTC Iso8601
            "YYYY-MM-DDThh:mm:ss" format)
          required: false
          type: string
        - in: query
          name: groupingWidth
          description: The time (in seconds) over which measurements are grouped together
          required: false
          type: integer
        - in: query
          name: groupingTimezone
          description: The time (in seconds) over which measurements are grouped together
          required: false
          type: string
        - in: query
          name: limit
          description: >-
            The LIMIT is used to limit the number of results returned. So if you
            have 1000 results, but only want to the first 10, you would set this
            to 10 and offset to 0.
          required: false
          type: integer
        - in: query
          name: offset
          description: >-
            Now suppose you wanted to show results 11-20. You'd set the offset
            to 10 and the limit to 10.
          required: false
          type: integer
        - in: query
          name: sort
          description: >-
            Sort by given field. If the field is prefixed with `-, it will sort
            in descending order.
          required: false
          type: integer
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/Measurement'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v2/measurements/request_csv:
    post:
      tags:
        - measurements
      summary: Post Request for Measurements CSV
      description: >-
        Use this endpoint to schedule a CSV export containing all user
        measurements to be emailed to the user within 24 hours.
      produces:
        - application/json
      parameters:
        - name: access_token
          in: query
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            type: integer
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v2/measurements/request_xls:
    post:
      tags:
        - measurements
      summary: Post Request for Measurements XLS
      description: >-
        Use this endpoint to schedule a XLS export containing all user
        measurements to be emailed to the user within 24 hours.
      produces:
        - application/json
      parameters:
        - name: access_token
          in: query
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            type: integer
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v2/measurements/request_pdf:
    post:
      tags:
        - measurements
      summary: Post Request for Measurements PDF
      description: >-
        Use this endpoint to schedule a PDF export containing all user
        measurements to be emailed to the user within 24 hours.
      produces:
        - application/json
      parameters:
        - name: access_token
          in: query
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            type: integer
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v2/measurements/csv:
    get:
      tags:
        - measurements
      summary: Get Measurements CSV
      description: Download a CSV containing all user measurements
      produces:
        - text/csv
      parameters:
        - name: access_token
          in: query
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            type: file
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/measurementsRange:
    get:
      tags:
        - measurements
      summary: Get measurements range for this user
      description: >-
        Get Unix time-stamp (epoch time) of the user's first and last
        measurements taken.
      produces:
        - application/json
      parameters:
        - in: query
          name: sources
          description: Enter source name to limit to specific source (varchar)
          required: false
          type: string
        - in: query
          name: user
          description: 'If not specified, uses currently logged in user (bigint)'
          required: false
          type: integer
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/MeasurementRange'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/measurementSources:
    post:
      tags:
        - measurements
      summary: Add a data source
      description: >-
        Add a life-tracking app or device to the QuantiModo list of data
        sources.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: body
          name: body
          description: An array of names of data sources you want to add.
          required: true
          schema:
            $ref: '#/definitions/MeasurementSource'
      responses:
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
    get:
      tags:
        - measurements
      summary: Get measurement sources
      description: Returns a list of all the apps from which measurement data is obtained.
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/MeasurementSource'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v2/oauth/authorize:
    get:
      tags:
        - authentication
      summary: Request Authorization Code
      description: >-
        You can implement OAuth2 authentication to your application using our
        **OAuth2** endpoints.  You need to redirect users to
        `/api/v2/oauth/authorize` endpoint to get an authorization code and
        include the parameters below.   This page will ask the user if they want
        to allow a client's application to submit or obtain data from their QM
        account. It will redirect the user to the url provided by the client
        application with the code as a query parameter or error in case of an
        error. See the /api/v2/oauth/access_token endpoint for the next steps.
      produces:
        - application/json
      parameters:
        - in: query
          name: clientId
          description: >-
            This is the unique ID that QuantiModo uses to identify your
            application. Obtain a client id by creating a free application at
            [https://app.quantimo.do/api/v2/apps](https://app.quantimo.do/api/v2/apps).
          required: true
          type: string
        - in: query
          name: client_secret
          description: >-
            This is the secret for your obtained clientId. QuantiModo uses this
            to validate that only your application uses the clientId.  Obtain
            this by creating a free application at
            [https://app.quantimo.do/api/v2/apps](https://app.quantimo.do/api/v2/apps).
          required: true
          type: string
        - in: query
          name: response_type
          description: >-
            If the value is code, launches a Basic flow, requiring a POST to the
            token endpoint to obtain the tokens. If the value is token id_token
            or id_token token, launches an Implicit flow, requiring the use of
            Javascript at the redirect URI to retrieve tokens from the URI
            #fragment.
          required: true
          type: string
        - in: query
          name: scope
          description: >-
            Scopes include basic, readmeasurements, and writemeasurements. The
            "basic" scope allows you to read user info (displayname, email,
            etc). The "readmeasurements" scope allows one to read a user's data.
            The "writemeasurements" scope allows you to write user data.
            Separate multiple scopes by a space.
          required: true
          type: string
        - in: query
          name: redirect_uri
          description: >-
            The redirect URI is the URL within your client application that will
            receive the OAuth2 credentials.
          required: false
          type: string
        - in: query
          name: state
          description: >-
            An opaque string that is round-tripped in the protocol; that is to
            say, it is returned as a URI parameter in the Basic flow, and in the
            URI
          required: false
          type: string
      responses:
        '200':
          description: Successful Operation
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v2/oauth2/access_token:
    get:
      tags:
        - authentication
      summary: Get a user access token
      description: >-
        Client provides authorization token obtained from
        /api/v1/oauth2/authorize to this endpoint and receives an access token.
        Access token can then be used to query different API endpoints of
        QuantiModo. ### Request Access Token After user approves your access to
        the given scope form the https:/app.quantimo.do/v2/oauth2/authorize
        endpoint, you'll receive an authorization code to request an access
        token. This time make a `POST` request to `/api/v2/oauth/access_token`
        with parameters including: * `grant_type` Can be `authorization_code` or
        `refresh_token` since we are getting the `access_token` for the first
        time we don't have a `refresh_token` so this must be
        `authorization_code`. * `code` Authorization code you received with the
        previous request. * `redirect_uri` Your application's redirect url. ###
        Refreshing Access Token Access tokens expire at some point, to continue
        using our api you need to refresh them with `refresh_token` you received
        along with the `access_token`. To do this make a `POST` request to
        `/api/v2/oauth/access_token` with correct parameters, which are: *
        `grant_type` This time grant type must be `refresh_token` since we have
        it. * `clientId` Your application's client id. * `client_secret` Your
        application's client secret. * `refresh_token` The refresh token you
        received with the `access_token`. Every request you make to this
        endpoint will give you a new refresh token and make the old one expired.
        So you can keep getting new access tokens with new refresh tokens. ###
        Using Access Token Currently we support 2 ways for this, you can't use
        both at the same time. * Adding access token to the request header as
        `Authorization: Bearer {access_token}` * Adding to the url as a query
        parameter `?access_token={access_token}` You can read more about OAuth2
        from [here](http://oauth.net/2/)
      produces:
        - application/json
      parameters:
        - in: query
          name: clientId
          description: >-
            This is the unique ID that QuantiModo uses to identify your
            application. Obtain a client id by emailing info@quantimo.do.
          required: true
          type: string
        - in: query
          name: client_secret
          description: >-
            This is the secret for your obtained clientId. QuantiModo uses this
            to validate that only your application uses the clientId.
          required: true
          type: string
        - in: query
          name: grant_type
          description: Grant Type can be 'authorization_code' or 'refresh_token'
          required: true
          type: string
        - in: query
          name: code
          description: Authorization code you received with the previous request.
          required: true
          type: string
        - in: query
          name: response_type
          description: >-
            If the value is code, launches a Basic flow, requiring a POST to the
            token endpoint to obtain the tokens. If the value is token id_token
            or id_token token, launches an Implicit flow, requiring the use of
            Javascript at the redirect URI to retrieve tokens from the URI
            #fragment.
          required: false
          type: string
        - in: query
          name: scope
          description: >-
            Scopes include basic, readmeasurements, and writemeasurements. The
            "basic" scope allows you to read user info (displayname, email,
            etc). The "readmeasurements" scope allows one to read a user's data.
            The "writemeasurements" scope allows you to write user data.
            Separate multiple scopes by a space.
          required: false
          type: string
        - in: query
          name: redirect_uri
          description: >-
            The redirect URI is the URL within your client application that will
            receive the OAuth2 credentials.
          required: false
          type: string
        - in: query
          name: state
          description: >-
            An opaque string that is round-tripped in the protocol; that is to
            say, it is returned as a URI parameter in the Basic flow, and in the
            URI
          required: false
          type: string
      responses:
        '200':
          description: Successful Operation
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v2/auth/social/login:
    get:
      tags:
        - authentication
      summary: First Setp in Social Authentication flow with JWT Token
      description: >2-
         Here is the flow for how social authentication works with a JWT Token
        1.**Client:** The client needs to open popup with social auth url
        (`https://app/quantimo.do/api/v2/auth/social/login?provider={provider}&redirectUrl={url}`)
        of server with `provider` and `redirectUrl`. (Url should be registered
        with our social apps. Facebook and Twitter are fine with any redirect
        url with the same domain base url but Google needs exact redirect url.)
        2.**Server:** The QM server will redirect user to that provider to get
        access. 3.**Client:** After successful or failed authentication, it will
        be redirected to given `redirectUrl` with code or error. 4.**Client:**
        The client needs to get that code and needs to send an Ajax request to
        server at
        `https://app.quantimo.do/api/v2/auth/social/authorizeCode?provider={provider}&code={authorizationCode}`
        5.**Server:** The QM server will authorize that code from the social
        connection and will authenticate user and will retrieve user info.
        6.**Server:** The QM server will try to find existing user by unique
        identity. If the user already exists then it will login. Otherwise, it
        will create new user and will then login. 7.**Server:** Once user is
        found/created, it will return a JWT token for that user in the response.
      produces:
        - application/json
      parameters:
        - in: query
          name: redirectUrl
          description: >-
            The redirect URI is the URL within your client application that will
            receive the OAuth2 credentials. Url should be registered with our
            social apps. Facebook and Twitter are fine with any redirect url
            with the same domain base url but Google needs exact redirect url.
          required: true
          type: string
        - in: query
          name: provider
          description: The current options are `google` and `facebook`.
          required: true
          type: string
      responses:
        '200':
          description: Successful Operation
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v2/auth/social/authorizeCode:
    get:
      tags:
        - authentication
      summary: Second Step in Social Authentication flow with JWT Token
      description: >2-
         Here is the flow for how social authentication works with a JWT Token
        1.**Client:** The client needs to open popup with social auth url
        (`https://app/quantimo.do/api/v2/auth/social/login?provider={provider}&redirectUrl={url}`)
        of server with `provider` and `redirectUrl`. (Url should be registered
        with our social apps. Facebook is fine with any redirect url with the
        same domain base url but Google needs exact redirect url.) 2.**Server:**
        The QM server will redirect user to that provider to get access.
        3.**Client:** After successful or failed authentication, it will be
        redirected to given `redirectUrl` with code or error. 4.**Client:** The
        client needs to get that code and needs to send an Ajax request to
        server at
        `https://app.quantimo.do/api/v2/auth/social/authorizeCode?provider={provider}&code={authorizationCode}`
        5.**Server:** The QM server will authorize that code from the social
        connection and will authenticate user and will retrieve user info.
        6.**Server:** The QM server will try to find existing user by unique
        identity. If the user already exists then it will login. Otherwise, it
        will create new user and will then login. 7.**Server:** Once user is
        found/created, it will return a JWT token for that user in the response.
      produces:
        - application/json
      parameters:
        - in: query
          name: code
          description: Authorization code obtained from the provider.
          required: true
          type: string
        - in: query
          name: provider
          description: The current options are `google` and `facebook`.
          required: true
          type: string
      responses:
        '200':
          description: Successful Operation
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v2/auth/social/authorizeToken:
    get:
      tags:
        - authentication
      summary: Native Social Authentication
      description: >-
        If you are using native authentication via Facebook or Google SDKs then
        you should use the following flow. 1.**Client:** Using native
        authentication via your native mobile app, get an access token using the
        instructions provided by the Facebook SDK
        (https://developers.facebook.com/docs/facebook-login) or Google
        (https://developers.google.com/identity/protocols/OAuth2) 2.**Client:**
        Send an Ajax request with provider name and access token on
        `https://app.quantimo.do/api/v2/auth/social/authorizeToken?provider={provider}&accessToken={accessToken}&refreshToken={refreshToken}`
        (`refreshToken` is optional) 3.**Server:** Server will try to get user
        info and will find existing user by unique identity. If user exist then
        it will do a login for that or it will create new user and will do login
        4.**Server:** Once user is found/created, it will return a JWT token for
        that user in response 5.**Client:** After getting the JWT token to get a
        QM access token follow these steps and include your JWT token in them as
        a header (Authorization: Bearer **{yourJWThere}**) or as a url parameter
        (https://app.quantimo.do/api/v2/oauth/authorize?token={yourJWThere}).
      produces:
        - application/json
      parameters:
        - in: query
          name: refreshToken
          description: Optional refresh token obtained from Google or FB native SDK
          required: false
          type: string
        - in: query
          name: accessToken
          description: User's OAuth2 access token obtained from Google or FB native SDK
          required: true
          type: string
        - in: query
          name: provider
          description: The current options are `google` and `facebook`.
          required: true
          type: string
      responses:
        '200':
          description: Successful Operation
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/organizations/{organizationId}/users':
    post:
      tags:
        - organizations
        - user
      summary: 'Get user tokens for existing users, create new users'
      description: 'Get user tokens for existing users, create new users'
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: path
          name: organizationId
          description: Organization ID
          required: true
          type: integer
        - in: body
          name: body
          description: Provides organization token and user ID
          required: true
          schema:
            $ref: '#/definitions/UserTokenRequest'
      responses:
        '200':
          description: 'User has been found, token was returned'
          schema:
            $ref: '#/definitions/UserTokenSuccessfulResponse'
        '201':
          description: 'User has been created, token was returned'
          schema:
            $ref: '#/definitions/UserTokenSuccessfulResponse'
        '400':
          description: Bad data
          schema:
            $ref: '#/definitions/UserTokenFailedResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/UserTokenFailedResponse'
  /v1/pairs:
    get:
      tags:
        - pairs
      summary: Get pairs
      description: >-
        Pairs cause measurements with effect measurements grouped over the
        duration of action after the onset delay.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: cause
          description: Original variable name for the explanatory or independent variable
          required: true
          type: string
        - in: query
          name: causeSource
          description: Name of data source that the cause measurements should come from
          required: false
          type: string
        - in: query
          name: causeUnit
          description: Abbreviated name for the unit cause measurements to be returned in
          required: false
          type: string
        - in: query
          name: delay
          description: >-
            The amount of time in seconds that elapses after the
            predictor/stimulus event before the outcome as perceived by a
            self-tracker is known as the “onset delay”. For example, the “onset
            delay” between the time a person takes an aspirin
            (predictor/stimulus event) and the time a person perceives a change
            in their headache severity (outcome) is approximately 30 minutes.
          required: false
          type: string
        - in: query
          name: duration
          description: >-
            The amount of time over which a predictor/stimulus event can exert
            an observable influence on an outcome variable’s value. For
            instance, aspirin (stimulus/predictor) typically decreases headache
            severity for approximately four hours (duration of action) following
            the onset delay.
          required: false
          type: string
        - in: query
          name: effect
          description: Original variable name for the outcome or dependent variable
          required: true
          type: string
        - in: query
          name: effectSource
          description: Name of data source that the effectmeasurements should come from
          required: false
          type: string
        - in: query
          name: effectUnit
          description: Abbreviated name for the unit effect measurements to be returned in
          required: false
          type: string
        - in: query
          name: endTime
          description: >-
            The most recent date (in epoch time) for which we should return
            measurements
          required: false
          type: string
        - in: query
          name: startTime
          description: >-
            The earliest date (in epoch time) for which we should return
            measurements
          required: false
          type: string
        - in: query
          name: limit
          description: >-
            The LIMIT is used to limit the number of results returned. So if you
            have 1000 results, but only want to the first 10, you would set this
            to 10 and offset to 0.
          required: false
          type: integer
        - in: query
          name: offset
          description: >-
            Now suppose you wanted to show results 11-20. You'd set the offset
            to 10 and the limit to 10.
          required: false
          type: integer
        - in: query
          name: sort
          description: >-
            Sort by given field. If the field is prefixed with `-, it will sort
            in descending order.
          required: false
          type: integer
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pairs'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/pairsCsv:
    get:
      tags:
        - pairs
      summary: Get pairs
      description: >-
        Pairs cause measurements with effect measurements grouped over the
        duration of action after the onset delay.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: cause
          description: Original variable name for the explanatory or independent variable
          required: true
          type: string
        - in: query
          name: causeSource
          description: Name of data source that the cause measurements should come from
          required: false
          type: string
        - in: query
          name: causeUnit
          description: Abbreviated name for the unit cause measurements to be returned in
          required: false
          type: string
        - in: query
          name: delay
          description: >-
            The amount of time in seconds that elapses after the
            predictor/stimulus event before the outcome as perceived by a
            self-tracker is known as the “onset delay”. For example, the “onset
            delay” between the time a person takes an aspirin
            (predictor/stimulus event) and the time a person perceives a change
            in their headache severity (outcome) is approximately 30 minutes.
          required: false
          type: string
        - in: query
          name: duration
          description: >-
            The amount of time over which a predictor/stimulus event can exert
            an observable influence on an outcome variable’s value. For
            instance, aspirin (stimulus/predictor) typically decreases headache
            severity for approximately four hours (duration of action) following
            the onset delay.
          required: false
          type: string
        - in: query
          name: effect
          description: Original variable name for the outcome or dependent variable
          required: true
          type: string
        - in: query
          name: effectSource
          description: Name of data source that the effectmeasurements should come from
          required: false
          type: string
        - in: query
          name: effectUnit
          description: Abbreviated name for the unit effect measurements to be returned in
          required: false
          type: string
        - in: query
          name: endTime
          description: >-
            The most recent date (in epoch time) for which we should return
            measurements
          required: false
          type: string
        - in: query
          name: startTime
          description: >-
            The earliest date (in epoch time) for which we should return
            measurements
          required: false
          type: string
        - in: query
          name: limit
          description: >-
            The LIMIT is used to limit the number of results returned. So if you
            have 1000 results, but only want to the first 10, you would set this
            to 10 and offset to 0.
          required: false
          type: integer
        - in: query
          name: offset
          description: >-
            Now suppose you wanted to show results 11-20. You'd set the offset
            to 10 and the limit to 10.
          required: false
          type: integer
        - in: query
          name: sort
          description: >-
            Sort by given field. If the field is prefixed with `-, it will sort
            in descending order.
          required: false
          type: integer
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pairs'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/trackingReminders:
    get:
      tags:
        - reminders
      summary: Get repeating tracking reminder settings
      description: >-
        Users can be reminded to track certain variables at a specified
        frequency with a default value.
      produces:
        - application/json
      parameters:
        - name: access_token
          in: query
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - name: variableCategoryName
          in: query
          description: Limit tracking reminders to a specific variable category
          required: false
          type: string
        - name: createdAt
          in: query
          description: >-
            When the record was first created. Use UTC ISO 8601
            "YYYY-MM-DDThh:mm:ss"  datetime format. Time zone should be UTC and
            not local.
          required: false
          type: string
        - name: updatedAt
          in: query
          description: >-
            When the record was last updated. Use UTC ISO 8601
            "YYYY-MM-DDThh:mm:ss"  datetime format. Time zone should be UTC and
            not local.
          required: false
          type: string
        - name: limit
          in: query
          description: >-
            The LIMIT is used to limit the number of results returned. So if you
            have 1000 results, but only want to the first 10, you would set this
            to 10 and offset to 0. The maximum limit is 200 records.
          required: false
          type: integer
        - name: offset
          in: query
          description: >-
            OFFSET says to skip that many rows before beginning to return rows
            to the client. OFFSET 0 is the same as omitting the OFFSET clause.
            If both OFFSET and LIMIT appear, then OFFSET rows are skipped before
            starting to count the LIMIT rows that are returned.
          required: false
          type: integer
        - name: sort
          in: query
          description: >-
            Sort by given field. If the field is prefixed with '-', it will sort
            in descending order.
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/definitions/TrackingReminder'
            type: object
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
    post:
      tags:
        - reminders
      summary: Store a Tracking Reminder
      description: >-
        This is to enable users to create reminders to track a variable with a
        default value at a specified frequency
      produces:
        - application/json
      parameters:
        - name: access_token
          in: query
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - name: body
          in: body
          description: TrackingReminder that should be stored
          required: false
          schema:
            $ref: '#/definitions/TrackingReminder'
      responses:
        '200':
          description: successful operation
          schema:
            properties:
              success:
                type: boolean
              data:
                $ref: '#/definitions/TrackingReminder'
            type: object
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/trackingReminders/delete:
    post:
      tags:
        - reminders
      summary: Delete tracking reminder
      description: Delete previously created tracking reminder
      produces:
        - application/json
      parameters:
        - name: access_token
          in: query
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: body
          name: body
          description: Id of reminder to be deleted
          required: true
          schema:
            $ref: '#/definitions/TrackingReminderDelete'
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/CommonResponse'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/trackingReminderNotifications:
    get:
      tags:
        - reminders
      summary: Get specific pending tracking reminders
      description: 'Specfic pending reminder instances that still need to be tracked.  '
      produces:
        - application/json
      parameters:
        - name: access_token
          in: query
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - name: variableCategoryName
          in: query
          description: >-
            Limit tracking reminder notifications to a specific variable
            category
          required: false
          type: string
        - name: createdAt
          in: query
          description: >-
            When the record was first created. Use UTC ISO 8601
            "YYYY-MM-DDThh:mm:ss"  datetime format. Time zone should be UTC and
            not local.
          required: false
          type: string
        - name: updatedAt
          in: query
          description: >-
            When the record was last updated. Use UTC ISO 8601
            "YYYY-MM-DDThh:mm:ss"  datetime format. Time zone should be UTC and
            not local.
          required: false
          type: string
        - name: limit
          in: query
          description: >-
            The LIMIT is used to limit the number of results returned. So if you
            have 1000 results, but only want to the first 10, you would set this
            to 10 and offset to 0. The maximum limit is 200 records.
          required: false
          type: integer
        - name: offset
          in: query
          description: >-
            OFFSET says to skip that many rows before beginning to return rows
            to the client. OFFSET 0 is the same as omitting the OFFSET clause.
            If both OFFSET and LIMIT appear, then OFFSET rows are skipped before
            starting to count the LIMIT rows that are returned.
          required: false
          type: integer
        - name: sort
          in: query
          description: >-
            Sort by given field. If the field is prefixed with '-', it will sort
            in descending order.
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/definitions/TrackingReminderNotification'
            type: object
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/trackingReminderNotifications/snooze:
    post:
      tags:
        - reminders
      summary: Snooze a pending tracking reminder
      description: Changes the reminder time to now plus one hour
      produces:
        - application/json
      parameters:
        - name: access_token
          in: query
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: body
          name: body
          description: Id of the pending reminder to be snoozed
          required: true
          schema:
            $ref: '#/definitions/TrackingReminderNotificationSnooze'
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/CommonResponse'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/trackingReminderNotifications/skip:
    post:
      tags:
        - reminders
      summary: Skip a pending tracking reminder
      description: Deletes the pending tracking reminder
      produces:
        - application/json
      parameters:
        - name: access_token
          in: query
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: body
          name: body
          description: Id of the pending reminder to be skipped or deleted
          required: true
          schema:
            $ref: '#/definitions/TrackingReminderNotificationSkip'
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/CommonResponse'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/trackingReminderNotifications/track:
    post:
      tags:
        - reminders
      summary: Track a pending tracking reminder
      description: >-
        Adds the default measurement for the pending tracking reminder with the
        reminder time as the measurment start time
      produces:
        - application/json
      parameters:
        - name: access_token
          in: query
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: body
          name: body
          description: Id of the pending reminder to be tracked
          required: true
          schema:
            $ref: '#/definitions/TrackingReminderNotificationTrack'
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/CommonResponse'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/units:
    get:
      tags:
        - units
      summary: Get all available units
      description: Get all available units
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: id
          description: Unit id
          required: false
          type: integer
        - in: query
          name: unitName
          description: Unit name
          required: false
          type: string
        - in: query
          name: unitAbbreviatedName
          description: >-
            Restrict the results to a specific unit by providing the unit
            abbreviation.
          required: false
          type: string
        - in: query
          name: unitCategoryName
          description: >-
            Restrict the results to a specific unit category by providing the
            unit category name.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Unit'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/unitCategories:
    get:
      tags:
        - units
      summary: Get unit categories
      description: >-
        Get a list of the categories of measurement units such as 'Distance',
        'Duration', 'Energy', 'Frequency', 'Miscellany', 'Pressure',
        'Proportion', 'Rating', 'Temperature', 'Volume', and 'Weight'.
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/UnitCategory'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/unitsVariable:
    get:
      tags:
        - units
      summary: Units for Variable
      description: Get a list of all possible units to use for a given variable
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: unitName
          description: Name of Unit you want to retrieve
          required: false
          type: string
        - in: query
          name: unitAbbreviatedName
          description: Abbreviated Unit Name of the unit you want
          required: false
          type: string
        - in: query
          name: unitCategoryName
          description: Name of the category you want units for
          required: false
          type: string
        - in: query
          name: variable
          description: Name of the variable you want units for
          required: false
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Unit'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/user/me:
    get:
      tags:
        - user
      summary: Get all available units for variableGet authenticated user
      description: Returns user info for the currently authenticated user.
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/userTags:
    post:
      tags:
        - tags
      summary: Post or update user tags or ingredients
      description: >-
        This endpoint allows users to tag foods with their ingredients.  This
        information will then be used to infer the user intake of the different
        ingredients by just entering the foods. The inferred intake levels will
        then be used to determine the effects of different nutrients on the user
        during analysis.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: body
          name: body
          description: Contains the new user tag data
          required: true
          schema:
            $ref: '#/definitions/UserTag'
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/CommonResponse'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/userTags/delete:
    post:
      tags:
        - tags
      summary: Delete user tag or ingredient
      description: Delete previously created user tags or ingredients.
      produces:
        - application/json
      parameters:
        - in: query
          name: taggedVariableId
          description: >-
            This is the id of the variable being tagged with an ingredient or
            something.
          required: true
          type: integer
        - in: query
          name: tagVariableId
          description: >-
            This is the id of the ingredient variable whose value is determined
            based on the value of the tagged variable.
          required: true
          type: integer
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/CommonResponse'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/variables:
    post:
      tags:
        - variables
      summary: Create Variables
      description: Allows the client to create a new variable in the `variables` table.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: body
          name: body
          description: Original name for the variable.
          required: true
          schema:
            $ref: '#/definitions/VariablesNew'
      responses:
        '200':
          description: Successful operation
        '201':
          description: Variable created
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
    get:
      tags:
        - variables
      summary: Get variables with user's settings
      description: >-
        Get variables for which the user has measurements. If the user has
        specified variable settings, these are provided instead of the common
        variable defaults.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: id
          description: Common variable id
          required: false
          type: integer
        - in: query
          name: category
          description: Filter data by category
          required: false
          type: string
        - in: query
          name: name
          description: Original name of the variable (supports exact name match only)
          required: false
          type: string
        - in: query
          name: lastUpdated
          description: >-
            Filter by the last time any of the properties of the variable were
            changed. Uses UTC format "YYYY-MM-DDThh:mm:ss"
          required: false
          type: string
        - in: query
          name: source
          description: >-
            The name of the data source that created the variable (supports
            exact name match only). So if you have a client application and you
            only want variables that were last updated by your app, you can
            include the name of your app here
          required: false
          type: string
        - in: query
          name: latestMeasurementTime
          description: >-
            Filter variables based on the last time a measurement for them was
            created or updated in the UTC format "YYYY-MM-DDThh:mm:ss"
          required: false
          type: string
        - in: query
          name: numberOfRawMeasurements
          description: >-
            Filter variables by the total number of measurements that they have.
            This could be used of you want to filter or sort by popularity.
          required: false
          type: string
        - in: query
          name: lastSource
          description: >-
            Limit variables to those which measurements were last submitted by a
            specific source. So if you have a client application and you only
            want variables that were last updated by your app, you can include
            the name of your app here. (supports exact name match only)
          required: false
          type: string
        - in: query
          name: limit
          description: >-
            The LIMIT is used to limit the number of results returned. So if you
            have 1000 results, but only want to the first 10, you would set this
            to 10 and offset to 0.
          required: false
          type: integer
        - in: query
          name: offset
          description: >-
            Now suppose you wanted to show results 11-20. You'd set the offset
            to 10 and the limit to 10.
          required: false
          type: integer
        - in: query
          name: sort
          description: >-
            Sort by given field. If the field is prefixed with `-, it will sort
            in descending order.
          required: false
          type: integer
      responses:
        '200':
          description: Variables returned
          schema:
            $ref: '#/definitions/Variable'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/variables/{variableName}':
    get:
      tags:
        - variables
      summary: Get info about a variable
      description: >-
        Get all of the settings and information about a variable by its name. If
        the logged in user has modified the settings for the variable, these
        will be provided instead of the default settings for that variable.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: path
          name: variableName
          description: Variable name
          required: true
          type: string
      responses:
        '200':
          description: Variables returned
          schema:
            $ref: '#/definitions/Variable'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/public/variables:
    get:
      tags:
        - variables
      summary: Get public variables
      description: >-
        This endpoint retrieves an array of all public variables. Public
        variables are things like foods, medications, symptoms, conditions, and
        anything not unique to a particular user. For instance, a telephone
        number or name would not be a public variable.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: id
          description: Common variable id
          required: false
          type: integer
        - in: query
          name: category
          description: Filter data by category
          required: false
          type: string
        - in: query
          name: name
          description: Original name of the variable (supports exact name match only)
          required: false
          type: string
        - in: query
          name: lastUpdated
          description: >-
            Filter by the last time any of the properties of the variable were
            changed. Uses UTC format "YYYY-MM-DDThh:mm:ss"
          required: false
          type: string
        - in: query
          name: source
          description: >-
            The name of the data source that created the variable (supports
            exact name match only). So if you have a client application and you
            only want variables that were last updated by your app, you can
            include the name of your app here
          required: false
          type: string
        - in: query
          name: latestMeasurementTime
          description: >-
            Filter variables based on the last time a measurement for them was
            created or updated in the UTC format "YYYY-MM-DDThh:mm:ss"
          required: false
          type: string
        - in: query
          name: numberOfRawMeasurements
          description: >-
            Filter variables by the total number of measurements that they have.
            This could be used of you want to filter or sort by popularity.
          required: false
          type: string
        - in: query
          name: lastSource
          description: >-
            Limit variables to those which measurements were last submitted by a
            specific source. So if you have a client application and you only
            want variables that were last updated by your app, you can include
            the name of your app here. (supports exact name match only)
          required: false
          type: string
        - in: query
          name: limit
          description: >-
            The LIMIT is used to limit the number of results returned. So if you
            have 1000 results, but only want to the first 10, you would set this
            to 10 and offset to 0.
          required: false
          type: integer
        - in: query
          name: offset
          description: >-
            Now suppose you wanted to show results 11-20. You'd set the offset
            to 10 and the limit to 10.
          required: false
          type: integer
        - in: query
          name: sort
          description: >-
            Sort by given field. If the field is prefixed with `-, it will sort
            in descending order.
          required: false
          type: integer
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Variable'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/public/variables/search/{search}':
    get:
      tags:
        - variables
      summary: Get top 5 PUBLIC variables with the most correlations
      description: >-
        Get top 5 PUBLIC variables with the most correlations containing the
        entered search characters. For example, search for 'mood' as an effect.
        Since 'Overall Mood' has a lot of correlations with other variables, it
        should be in the autocomplete list.Supported filter
        parameters:<ul><li><b>category</b> - Category of Variable</li></ul>
      produces:
        - application/json
      parameters:
        - in: path
          name: search
          description: Search query can be some fraction of a variable name.
          required: true
          type: string
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: variableCategoryName
          description: >-
            Filter variables by category name. The variable categories include
            Activity, Causes of Illness, Cognitive Performance, Conditions,
            Environment, Foods, Location, Miscellaneous, Mood, Nutrition,
            Physical Activity, Physique, Sleep, Social Interactions, Symptoms,
            Treatments, Vital Signs, and Work.
          required: false
          type: string
        - in: query
          name: source
          description: >-
            Specify a data source name to only return variables from a specific
            data source.
          required: false
          type: string
        - in: query
          name: effectOrCause
          description: >-
            Indicate if you only want variables that have user correlations.
            Possible values are effect and cause.
          required: false
          type: string
        - in: query
          name: publicEffectOrCause
          description: >-
            Indicate if you only want variables that have aggregated
            correlations.  Possible values are effect and cause.
          required: false
          type: string
        - in: query
          name: limit
          description: >-
            The LIMIT is used to limit the number of results returned. So if you
            have 1000 results, but only want to the first 10, you would set this
            to 10 and offset to 0.
          required: false
          type: integer
        - in: query
          name: offset
          description: >-
            Now suppose you wanted to show results 11-20. You'd set the offset
            to 10 and the limit to 10.
          required: false
          type: integer
        - in: query
          name: sort
          description: >-
            Sort by given field. If the field is prefixed with `-, it will sort
            in descending order.
          required: false
          type: integer
      responses:
        '200':
          description: Variables returned
          schema:
            $ref: '#/definitions/Variable'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  '/v1/variables/search/{search}':
    get:
      tags:
        - variables
      summary: Get variables by search query
      description: >-
        Get variables containing the search characters for which the currently
        logged in user has measurements. Used to provide auto-complete function
        in variable search boxes.
      produces:
        - application/json
      parameters:
        - in: path
          name: search
          description: >-
            Search query which may be an entire variable name or a fragment of
            one.
          required: true
          type: string
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: query
          name: variableCategoryName
          description: >-
            Filter variables by category name. The variable categories include
            Activity, Causes of Illness, Cognitive Performance, Conditions,
            Environment, Foods, Location, Miscellaneous, Mood, Nutrition,
            Physical Activity, Physique, Sleep, Social Interactions, Symptoms,
            Treatments, Vital Signs, and Work.
          required: false
          type: string
        - in: query
          name: includePublic
          description: >-
            Set to true if you would like to include public variables when no
            user variables are found.
          required: false
          type: boolean
        - in: query
          name: manualTracking
          description: >-
            Set to true if you would like to exlude variables like apps and
            website names.
          required: false
          type: boolean
        - in: query
          name: source
          description: >-
            Specify a data source name to only return variables from a specific
            data source.
          required: false
          type: string
        - in: query
          name: effectOrCause
          description: >-
            Indicate if you only want variables that have user correlations.
            Possible values are effect and cause.
          required: false
          type: string
        - in: query
          name: publicEffectOrCause
          description: >-
            Indicate if you only want variables that have aggregated
            correlations.  Possible values are effect and cause.
          required: false
          type: string
        - in: query
          name: limit
          description: >-
            The LIMIT is used to limit the number of results returned. So if you
            have 1000 results, but only want to the first 10, you would set this
            to 10 and offset to 0.
          required: false
          type: integer
        - in: query
          name: offset
          description: >-
            Now suppose you wanted to show results 11-20. You'd set the offset
            to 10 and the limit to 10.
          required: false
          type: integer
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Variable'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/userVariables:
    post:
      tags:
        - variables
      summary: Update User Settings for a Variable
      description: >-
        Users can change the parameters used in analysis of that variable such
        as the expected duration of action for a variable to have an effect, the
        estimated delay before the onset of action. In order to filter out
        erroneous data, they are able to set the maximum and minimum reasonable
        daily values for a variable.
      produces:
        - application/json
      parameters:
        - in: body
          name: userVariables
          description: Variable user settings data
          required: true
          schema:
            $ref: '#/definitions/UserVariables'
      responses:
        '200':
          description: Successful operation
        '400':
          description: The received JSON was invalid or malformed
        '401':
          description: Not Authenticated
        '404':
          description: Unknown target user ID
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/userVariables/delete:
    post:
      tags:
        - variables
      summary: Delete All Measurements For Variable
      description: Users can delete all of their measurements for a variable
      produces:
        - application/json
      parameters:
        - in: body
          name: variableId
          description: Id of the variable whose measurements should be deleted
          required: true
          schema:
            $ref: '#/definitions/UserVariableDelete'
      responses:
        '200':
          description: Successful operation
        '400':
          description: The received JSON was invalid or malformed
        '401':
          description: Not Authenticated
        '404':
          description: Unknown target user ID
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/userVariables/reset:
    post:
      tags:
        - variables
      summary: Reset user settings for a variable to defaults
      description: Reset user settings for a variable to defaults
      produces:
        - application/json
      parameters:
        - in: body
          name: variableId
          description: Id of the variable that should be reset
          required: true
          schema:
            $ref: '#/definitions/UserVariableDelete'
      responses:
        '201':
          description: Successful operation
        '400':
          description: The received JSON was invalid or malformed
        '401':
          description: Not Authenticated
        '404':
          description: Unknown target user ID
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/variableCategories:
    get:
      tags:
        - variables
      summary: Variable categories
      description: >-
        The variable categories include Activity, Causes of Illness, Cognitive
        Performance, Conditions, Environment, Foods, Location, Miscellaneous,
        Mood, Nutrition, Physical Activity, Physique, Sleep, Social
        Interactions, Symptoms, Treatments, Vital Signs, and Work.
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/VariableCategory'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/votes:
    post:
      tags:
        - correlations
        - votes
      summary: Post or update vote
      description: >-
        This is to enable users to indicate their opinion on the plausibility of
        a causal relationship between a treatment and outcome. QuantiModo
        incorporates crowd-sourced plausibility estimations into their
        algorithm. This is done allowing user to indicate their view of the
        plausibility of each relationship with thumbs up/down buttons placed
        next to each prediction.
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: body
          name: body
          description: 'Contains the cause variable, effect variable, and vote value.'
          required: true
          schema:
            $ref: '#/definitions/PostVote'
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/CommonResponse'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
  /v1/votes/delete:
    post:
      tags:
        - correlations
        - votes
      summary: Delete vote
      description: Delete previously posted vote
      produces:
        - application/json
      parameters:
        - in: query
          name: access_token
          description: User's OAuth2 access token
          required: false
          type: string
        - in: query
          name: userId
          description: User's id
          required: false
          type: integer
        - in: body
          name: body
          description: >-
            The cause and effect variable names for the predictor vote to be
            deleted.
          required: true
          schema:
            $ref: '#/definitions/VoteDelete'
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/CommonResponse'
        '401':
          description: Not Authenticated
      security:
        - access_token: []
        - quantimodo_oauth2:
            - basic
definitions:
  CommonResponse:
    type: object
    required:
      - status
      - success
    properties:
      status:
        type: integer
        description: Status code
      message:
        type: string
        description: Message
      success:
        type: boolean
  ConnectorInstruction:
    properties:
      url:
        type: string
        description: url
      parameters:
        type: array
        items:
          type: string
        description: parameters array
      usePopup:
        type: boolean
        description: usePopup
  Connector:
    required:
      - id
      - name
      - displayName
      - image
      - getItUrl
      - connected
      - connectInstructions
      - lastUpdate
      - totalMeasurementsInLastUpdate
    properties:
      id:
        type: integer
        description: Connector ID number
      name:
        type: string
        description: Connector lowercase system name
      displayName:
        type: string
        description: Connector pretty display name
      image:
        type: string
        description: URL to the image of the connector logo
      getItUrl:
        type: string
        description: URL to a site where one can get this device or application
      connected:
        type: string
        description: True if the authenticated user has this connector enabled
      connectInstructions:
        type: string
        description: URL and parameters used when connecting to a service
      lastUpdate:
        type: integer
        description: Epoch timestamp of last sync
      totalMeasurementsInLastUpdate:
        type: integer
        description: Number of measurements obtained during latest update
  ConnectorInfo:
    required:
      - id
      - connected
      - error
      - history
    properties:
      id:
        type: integer
        description: Connector ID number
      connected:
        type: boolean
        description: True if the authenticated user has this connector enabled
      error:
        type: string
        description: Error message. Empty if connected.
      history:
        type: array
        items:
          $ref: '#/definitions/ConnectorInfoHistoryItem'
  ConnectorInfoHistoryItem:
    required:
      - numberOfMeasurements
      - success
      - message
      - createdAt
    properties:
      numberOfMeasurements:
        type: integer
        description: Number of measurements
      success:
        type: boolean
        description: True if the update was successfull
      message:
        type: string
        description: Error message.
      createdAt:
        type: string
        description: Date and time of the update in UTC time zone
  ConversionStep:
    required:
      - operation
      - value
    properties:
      operation:
        type: string
        enum:
          - MULTIPLY
          - ADD
        description: ADD or MULTIPLY
      value:
        type: number
        format: double
        description: This specifies the order of conversion steps starting with 0
  Correlation:
    required:
      - correlationCoefficient
      - cause
      - effect
      - onsetDelay
      - durationOfAction
      - numberOfPairs
      - timestamp
    properties:
      averageDailyLowCause:
        type: number
        description: ''
      averageDailyHighCause:
        type: number
        description: ''
      averageEffect:
        type: number
        description: ''
      averageEffectFollowingHighCause:
        type: number
        description: ''
      averageEffectFollowingLowCause:
        type: number
        description: ''
      averageEffectFollowingHighCauseExplanation:
        type: string
        description: ''
      averageEffectFollowingLowCauseExplanation:
        type: string
        description: ''
      averageVote:
        type: number
        description: Average Vote
      causalityFactor:
        type: number
        description: ''
      cause:
        type: string
        description: >-
          ORIGINAL variable name of the cause variable for which the user
          desires correlations.
      causeVariableCategoryName:
        type: string
        description: Variable category of the cause variable.
      causeChanges:
        type: integer
        description: >-
          Number of changes in the predictor variable (a.k.a the number of
          experiments)
      causeVariableCombinationOperation:
        type: string
        description: The way cause measurements are aggregated
      causeVariableImageUrl:
        type: string
        description: ''
      causeVariableIonIcon:
        type: string
        description: For use in Ionic apps
      causeUnit:
        type: string
        description: Unit of the predictor variable
      causeVariableDefaultUnitId:
        type: integer
        description: Unit Id of the predictor variable
      causeVariableId:
        type: integer
        description: ''
      causeVariableName:
        type: string
        description: >-
          ORIGINAL variable name of the cause variable for which the user
          desires correlations.
      correlationCoefficient:
        type: number
        description: Pearson correlation coefficient between cause and effect measurements
      createdAt:
        description: >-
          When the record was first created. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
      dataAnalysis:
        type: string
        description: How the data was analyzed
      dataSources:
        type: string
        description: How the data was obtained
      durationOfAction:
        type: number
        description: >-
          The amount of time over which a predictor/stimulus event can exert an
          observable influence on an outcome variable’s value. For instance,
          aspirin (stimulus/predictor) typically decreases headache severity for
          approximately four hours (duration of action) following the onset
          delay.
      effect:
        type: string
        description: >-
          ORIGINAL variable name of the effect variable for which the user
          desires correlations.
      effectVariableCategoryName:
        type: string
        description: Variable category of the effect variable.
      effectVariableImageUrl:
        type: string
        description: ''
      effectVariableIonIcon:
        type: string
        description: For use in Ionic apps
      effectSize:
        type: string
        description: >-
          Magnitude of the effects of a cause indicating whether it's
          practically meaningful.
      effectVariableId:
        type: string
        description: >-
          Magnitude of the effects of a cause indicating whether it's
          practically meaningful.
      effectVariableName:
        type: string
        description: >-
          ORIGINAL variable name of the effect variable for which the user
          desires correlations.
      gaugeImage:
        type: string
        description: Illustrates the strength of the relationship
      imageUrl:
        type: string
        description: Large image for Facebook
      numberOfPairs:
        type: number
        description: Number of points that went into the correlation calculation
      onsetDelay:
        type: number
        format: double
        description: >-
          The amount of time in seconds that elapses after the
          predictor/stimulus event before the outcome as perceived by a
          self-tracker is known as the “onset delay”. For example, the “onset
          delay” between the time a person takes an aspirin (predictor/stimulus
          event) and the time a person perceives a change in their headache
          severity (outcome) is approximately 30 minutes.
      optimalPearsonProduct:
        type: number
        description: Optimal Pearson Product
      outcomeDataSources:
        type: string
        description: original name of the cause.
      predictorExplanation:
        type: string
        description: HIGHER Remeron predicts HIGHER Overall Mood
      principalInvestigator:
        type: string
        description: Mike Sinn
      qmScore:
        type: number
        description: >-
          Value representing the significance of the relationship as a function
          of crowdsourced insights, predictive strength, data quantity, and data
          quality
      reverseCorrelation:
        type: number
        description: >-
          Correlation when cause and effect are reversed. For any causal
          relationship, the forward correlation should exceed the reverse
          correlation.
      significanceExplanation:
        type: string
        description: >-
          Using a two-tailed t-test with alpha = 0.05, it was determined that
          the change...
      statisticalSignificance:
        type: string
        description: A function of the effect size and sample size
      strengthLevel:
        type: string
        description: 'weak, moderate, strong'
      studyAbstract:
        type: string
        description: These data suggest with a high degree of confidence...
      studyBackground:
        type: string
        description: >-
          In order to reduce suffering through the advancement of human
          knowledge...
      studyDesign:
        type: string
        description: This study is based on data donated by one QuantiModo user...
      studyLimitations:
        type: string
        description: >-
          As with any human experiment, it was impossible to control for all
          potentially confounding variables...
      studyLinkDynamic:
        type: string
        description: Url for the interactive study within the web app
      studyLinkFacebook:
        type: string
        description: Url for sharing the study on Facebook
      studyLinkGoogle:
        type: string
        description: Url for sharing the study on Google+
      studyLinkTwitter:
        type: string
        description: Url for sharing the study on Twitter
      studyLinkStatic:
        type: string
        description: Url for sharing the statically rendered study on social media
      studyObjective:
        type: string
        description: The objective of this study is to determine...
      studyResults:
        type: string
        description: This analysis suggests that...
      studyTitle:
        type: string
        description: N1 Study HIGHER Remeron predicts HIGHER Overall Mood
      timestamp:
        type: number
        description: Time at which correlation was calculated
      updatedAt:
        description: >-
          When the record in the database was last updated. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format. Time zone should be UTC and
          not local.
        type: string
        format: date-time
      userVote:
        type: number
        description: User Vote
      valuePredictingHighOutcome:
        type: number
        description: >-
          cause value that predicts an above average effect value (in default
          unit for cause variable)
      valuePredictingHighOutcomeExplanation:
        type: string
        description: 'Overall Mood, on average, 34% HIGHER after around 3.98mg Remeron'
      valuePredictingLowOutcome:
        type: number
        description: >-
          cause value that predicts a below average effect value (in default
          unit for cause variable)
      valuePredictingLowOutcomeExplanation:
        type: string
        description: 'Overall Mood, on average, 4% LOWER after around 0mg Remeron'
  Connection:
    required:
      - connectorId
    properties:
      id:
        description: id
        type: integer
        format: int32
      userId:
        description: ID of user that owns this correlation
        type: integer
        format: int32
      connectorId:
        description: >-
          The id for the connector data source for which the connection is
          connected
        type: integer
        format: int32
      connectStatus:
        description: >-
          Indicates whether a connector is currently connected to a service for
          a user.
        type: string
      connectError:
        description: Error message if there is a problem with authorizing this connection.
        type: string
      updateRequestedAt:
        description: Time at which an update was requested by a user.
        type: string
        format: date-time
      updateStatus:
        description: Indicates whether a connector is currently updated.
        type: string
      updateError:
        description: Indicates if there was an error during the update.
        type: string
      lastSuccessfulUpdatedAt:
        description: The time at which the connector was last successfully updated.
        type: string
        format: date-time
      createdAt:
        description: >-
          When the record was first created. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
      updatedAt:
        description: >-
          When the record in the database was last updated. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
  HumanTime:
    type: object
    properties:
      date:
        type: string
        description: date time
      timezone_type:
        type: integer
      timezone:
        type: string
        description: timezone of date time
  JsonErrorResponse:
    required:
      - status
    properties:
      status:
        type: string
        description: 'Status: "ok" or "error"'
      message:
        type: string
        description: Error message
  MeasurementSet:
    required:
      - measurements
      - variableName
      - sourceName
      - unitAbbreviatedName
    properties:
      measurements:
        type: array
        items:
          $ref: '#/definitions/ValueObject'
        description: 'Array of timestamps, values, and optional notes'
      variableName:
        type: string
        description: >-
          ORIGINAL name of the variable for which we are creating the
          measurement records
      sourceName:
        type: string
        description: >-
          Name of the application or device used to record the measurement
          values
      variableCategoryName:
        type: string
        description: Variable category name
      combinationOperation:
        type: string
        enum:
          - MEAN
          - SUM
        description: >-
          Way to aggregate measurements over time. Options are "MEAN" or "SUM".
          SUM should be used for things like minutes of exercise.  If you use
          MEAN for exercise, then a person might exercise more minutes in one
          day but add separate measurements that were smaller.  So when we are
          doing correlational analysis, we would think that the person exercised
          less that day even though they exercised more.  Conversely, we must
          use MEAN for things such as ratings which cannot be SUMMED.
      unitAbbreviatedName:
        type: string
        description: Unit of measurement
  Measurement:
    required:
      - variableName
      - sourceName
      - startTimeString
      - value
      - unitAbbreviatedName
    properties:
      variableName:
        type: string
        description: Name of the variable for which we are creating the measurement records
      sourceName:
        type: string
        description: Application or device used to record the measurement values
      startTimeString:
        type: string
        description: >-
          Start Time for the measurement event in UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"
      startTimeEpoch:
        type: integer
        description: >-
          Seconds between the start of the event measured and 1970 (Unix
          timestamp)
      humanTime:
        $ref: '#/definitions/HumanTime'
      value:
        type: number
        format: double
        description: Converted measurement value in requested unit
      originalValue:
        type: integer
        description: Original value as originally submitted
      originalunitAbbreviatedName:
        type: string
        description: Original Unit of measurement as originally submitted
      unitAbbreviatedName:
        type: string
        description: Abbreviated name for the unit of measurement
      note:
        type: string
        description: Note of measurement
  MeasurementDelete:
    required:
      - variableId
      - startTime
    properties:
      variableId:
        type: integer
        description: Variable id of the measurement to be deleted
      startTime:
        type: integer
        description: Start time of the measurement to be deleted
  MeasurementUpdate:
    required:
      - id
    properties:
      id:
        type: integer
        description: Variable id of the measurement to be deleted
      startTime:
        type: integer
        description: The new timestamp for the the event in epoch seconds (optional)
      value:
        type: number
        format: double
        description: The new value of for the measurement (optional)
      note:
        type: string
        description: The new note for the measurement (optional)
  MeasurementRange:
    required:
      - lowerLimit
    properties:
      lowerLimit:
        type: integer
        description: The timestamp of the earliest measurement for a user.
      upperLimit:
        type: integer
        description: The timestamp of the most recent measurement for a user.
  MeasurementSource:
    required:
      - name
    properties:
      name:
        type: string
        description: Name of the application or device.
  Pairs:
    required:
      - name
    properties:
      name:
        type: string
        description: Category name
  Permission:
    required:
      - target
      - variableName
      - minTimestamp
      - maxTimestamp
      - minTimeOfDay
      - maxTimeOfDay
      - week
    properties:
      target:
        type: integer
        description: >-
          Grant permission to target user or public so they may access
          measurements within the given parameters. TODO: Rename target to
          something more intuitive.
      variableName:
        type: string
        description: ORIGINAL Variable name
      minTimestamp:
        type: integer
        description: Earliest time when measurements will be accessible in epoch seconds
      maxTimestamp:
        type: integer
        description: Latest time when measurements will be accessible in epoch seconds
      minTimeOfDay:
        type: integer
        description: >-
          Earliest time of day when measurements will be accessible in epoch
          seconds
      maxTimeOfDay:
        type: integer
        description: >-
          Latest time of day when measurements will be accessible in epoch
          seconds
      week:
        type: string
        description: Maybe specifies if only weekday measurements should be accessible
  PostVote:
    required:
      - causeVariableId
      - effectVariableId
      - vote
    properties:
      causeVariableId:
        type: integer
        description: Cause variable id
      effectVariableId:
        type: integer
        description: Effect variable id
      vote:
        type: boolean
        description: 'Vote: 0 (for implausible) or 1 (for plausible)'
  PostCorrelation:
    required:
      - causeVariableName
      - effectVariableName
      - correlation
    properties:
      causeVariableName:
        type: string
        description: Cause variable name
      effectVariableName:
        type: string
        description: Effect variable name
      correlation:
        type: number
        format: double
        description: Correlation value
      vote:
        type: integer
        description: 'Vote: 0 or 1'
  UserVariableDelete:
    required:
      - variableId
    properties:
      variableId:
        type: integer
        description: Id of the variable whose measurements should be deleted
  TrackingReminderDelete:
    required:
      - id
    properties:
      id:
        type: integer
        description: Id of the PENDING reminder to be deleted
  TrackingReminderNotificationSkip:
    required:
      - id
    properties:
      id:
        type: integer
        description: Id of the PENDING reminder to be skipped
  TrackingReminderNotificationSnooze:
    required:
      - id
    properties:
      id:
        type: integer
        description: Id of the PENDING reminder to be snoozed
  TrackingReminderNotificationTrack:
    required:
      - trackingReminderNotification
    properties:
      trackingReminderNotification:
        $ref: '#/definitions/TrackingReminderNotification'
      modifiedValue:
        type: number
        description: >-
          Optional value to be recorded instead of the tracking reminder default
          value
  TrackingReminder:
    required:
      - variableId
      - reminderFrequency
      - defaultValue
    properties:
      id:
        description: id
        type: integer
        format: int32
      clientId:
        description: clientId
        type: string
      userId:
        description: ID of User
        type: integer
        format: int32
      variableId:
        description: Id for the variable to be tracked
        type: integer
        format: int32
      defaultValue:
        description: Default value to use for the measurement when tracking
        type: number
        format: float
      reminderStartTime:
        description: >-
          Earliest time of day at which reminders should appear in UTC HH:MM:SS
          format
        type: string
      reminderEndTime:
        description: >-
          Latest time of day at which reminders should appear in UTC HH:MM:SS
          format
        type: string
      reminderSound:
        description: String identifier for the sound to accompany the reminder
        type: string
      reminderFrequency:
        description: Number of seconds between one reminder and the next
        type: integer
        format: int32
      popUp:
        description: True if the reminders should appear as a popup notification
        type: boolean
      sms:
        description: True if the reminders should be delivered via SMS
        type: boolean
      email:
        description: True if the reminders should be delivered via email
        type: boolean
      notificationBar:
        description: True if the reminders should appear in the notification bar
        type: boolean
      latestTrackingReminderNotificationReminderTime:
        description: >-
          UTC ISO 8601 "YYYY-MM-DDThh:mm:ss"  timestamp for the reminder time of
          the latest tracking reminder notification that has been pre-emptively
          generated in the database
        type: string
        format: date-time
      lastTracked:
        description: >-
          UTC ISO 8601 "YYYY-MM-DDThh:mm:ss"  timestamp for the last time a
          measurement was received for this user and variable
        type: string
        format: date-time
      startTrackingDate:
        description: >-
          Earliest date on which the user should be reminded to track in
          YYYY-MM-DD format
        type: string
        format: string
      stopTrackingDate:
        description: >-
          Latest date on which the user should be reminded to track in
          YYYY-MM-DD format
        type: string
        format: string
      updatedAt:
        description: >-
          When the record in the database was last updated. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format. Time zone should be UTC and
          not local.
        type: string
        format: date-time
      variableName:
        description: Name of the variable to be used when sending measurements
        type: string
      variableCategoryName:
        description: Name of the variable category to be used when sending measurements
        type: string
      unitAbbreviatedName:
        description: Abbreviated name of the unit to be used when sending measurements
        type: string
      combinationOperation:
        description: The way multiple measurements are aggregated over time
        type: string
        enum:
          - MEAN
          - SUM
  TrackingReminderNotification:
    required:
      - id
      - trackingReminderId
    properties:
      id:
        description: id for the specific PENDING tracking remidner
        type: integer
        format: int32
      trackingReminderId:
        description: id for the repeating tracking remidner
        type: integer
        format: int32
      clientId:
        description: clientId
        type: string
      userId:
        description: ID of User
        type: integer
        format: int32
      variableId:
        description: Id for the variable to be tracked
        type: integer
        format: int32
      pendingReminderTime:
        description: >-
          UTC ISO 8601 "YYYY-MM-DDThh:mm:ss"  timestamp for the specific time
          the variable should be tracked in UTC.  This will be used for the
          measurement startTime if the track endpoint is used.
        type: string
        format: date-time
      defaultValue:
        description: Default value to use for the measurement when tracking
        type: number
        format: float
      reminderSound:
        description: String identifier for the sound to accompany the reminder
        type: string
      popUp:
        description: True if the reminders should appear as a popup notification
        type: boolean
      sms:
        description: True if the reminders should be delivered via SMS
        type: boolean
      email:
        description: True if the reminders should be delivered via email
        type: boolean
      notificationBar:
        description: True if the reminders should appear in the notification bar
        type: boolean
      updatedAt:
        description: >-
          When the record in the database was last updated. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format. Time zone should be UTC and
          not local.
        type: string
        format: date-time
      variableName:
        description: Name of the variable to be used when sending measurements
        type: string
      variableCategoryName:
        description: Name of the variable category to be used when sending measurements
        type: string
      unitAbbreviatedName:
        description: Abbreviated name of the unit to be used when sending measurements
        type: string
      combinationOperation:
        description: The way multiple measurements are aggregated over time
        type: string
        enum:
          - MEAN
          - SUM
  Unit:
    required:
      - name
      - abbreviatedName
      - category
      - conversionSteps
    properties:
      name:
        type: string
        description: Unit name
      abbreviatedName:
        type: string
        description: Unit abbreviation
      category:
        type: string
        enum:
          - Distance
          - Duration
          - Energy
          - Frequency
          - Miscellany
          - Pressure
          - Proportion
          - Rating
          - Temperature
          - Volume
          - Weight
        description: Unit category
      minimumAllowedValue:
        type: number
        format: double
        description: >-
          The minimum allowed value for measurements. While you can record a
          value below this minimum, it will be excluded from the correlation
          analysis.
      maximumAllowedValue:
        type: number
        format: double
        description: >-
          The maximum allowed value for measurements. While you can record a
          value above this maximum, it will be excluded from the correlation
          analysis.
      conversionSteps:
        type: array
        items:
          $ref: '#/definitions/ConversionStep'
        description: Conversion steps list
  UnitCategory:
    required:
      - name
    properties:
      name:
        type: string
        description: Category name
  User:
    required:
      - id
      - wpId
      - displayName
      - loginName
      - email
      - token
      - administrator
    properties:
      id:
        type: integer
        description: User id
      wpId:
        type: integer
        description: Wordpress user id
      displayName:
        type: string
        description: User display name
      loginName:
        type: string
        description: User login name
      email:
        type: string
        description: User email
      token:
        type: string
        description: User token
      administrator:
        type: boolean
        description: Is user administrator
  UserTag:
    required:
      - taggedVariableId
      - tagVariableId
      - conversionFactor
    properties:
      taggedVariableId:
        type: integer
        description: >-
          This is the id of the variable being tagged with an ingredient or
          something.
      tagVariableId:
        type: integer
        description: >-
          This is the id of the ingredient variable whose value is determined
          based on the value of the tagged variable.
      conversionFactor:
        type: number
        description: >-
          Number by which we multiply the tagged variable value to obtain the
          tag variable (ingredient) value
  UserTokenRequest:
    type: object
    required:
      - organizationAccessToken
    properties:
      user:
        $ref: '#/definitions/UserTokenRequestInnerUserField'
      organizationAccessToken:
        type: string
        description: Organization Access token
  UserTokenSuccessfulResponse:
    type: object
    required:
      - code
      - message
      - user
    properties:
      code:
        type: integer
        description: Status code
      message:
        type: string
        description: Message
      user:
        $ref: '#/definitions/UserTokenSuccessfulResponseInnerUserField'
  UserTokenFailedResponse:
    type: object
    required:
      - code
      - message
      - success
    properties:
      code:
        type: integer
        description: Status code
      message:
        type: string
        description: Message
      success:
        type: boolean
  UserTokenRequestInnerUserField:
    properties:
      id:
        type: integer
        description: WordPress user ID
  UserTokenSuccessfulResponseInnerUserField:
    required:
      - id
      - access_token
    properties:
      id:
        type: integer
        description: WordPress user ID
      access_token:
        type: string
        description: User token
  UserVariableRelationship:
    required:
      - confidence_level
      - confidence_score
      - direction
      - duration_of_action
      - outcome_variableId
      - predictor_variableId
      - predictor_unit_id
      - sinn_rank
      - strength_level
      - strength_score
      - value_predicting_high_outcome
      - value_predicting_low_outcome
    properties:
      id:
        description: id
        type: integer
        format: int32
      confidence_level:
        description: >-
          Our confidence that a consistent predictive relationship exists based
          on the amount of evidence, reproducibility, and other factors
        type: string
      confidence_score:
        description: >-
          A quantitative representation of our confidence that a consistent
          predictive relationship exists based on the amount of evidence,
          reproducibility, and other factors
        type: number
        format: float
      direction:
        description: >-
          Direction is positive if higher predictor values generally precede
          higher outcome values. Direction is negative if higher predictor
          values generally precede lower outcome values.
        type: string
      duration_of_action:
        description: >-
          The amount of time over which a predictor/stimulus event can exert an
          observable influence on an outcome variable’s value. For instance,
          aspirin (stimulus/predictor) typically decreases headache severity for
          approximately four hours (duration of action) following the onset
          delay.
        type: integer
        format: int32
      error_message:
        description: error_message
        type: string
      onset_delay:
        description: >-
          The amount of time in seconds that elapses after the
          predictor/stimulus event before the outcome as perceived by a
          self-tracker is known as the “onset delay”. For example, the “onset
          delay” between the time a person takes an aspirin (predictor/stimulus
          event) and the time a person perceives a change in their headache
          severity (outcome) is approximately 30 minutes.
        type: integer
        format: int32
      outcome_variableId:
        description: Variable ID for the outcome variable
        type: integer
        format: int32
      predictor_variableId:
        description: Variable ID for the predictor variable
        type: integer
        format: int32
      predictor_unit_id:
        description: ID for default unit of the predictor variable
        type: integer
        format: int32
      sinn_rank:
        description: >-
          A value representative of the relevance of this predictor relative to
          other predictors of this outcome.  Usually used for relevancy sorting.
        type: number
        format: float
      strength_level:
        description: >-
          Can be weak, medium, or strong based on the size of the effect which
          the predictor appears to have on the outcome relative to other
          variable relationship strength scores.
        type: string
      strength_score:
        description: >-
          A value represented to the size of the effect which the predictor
          appears to have on the outcome.
        type: number
        format: float
      userId:
        description: userId
        type: integer
        format: int32
      vote:
        description: vote
        type: string
      value_predicting_high_outcome:
        description: >-
          Value for the predictor variable (in it's default unit) which
          typically precedes an above average outcome value
        type: number
        format: float
      value_predicting_low_outcome:
        description: >-
          Value for the predictor variable (in it's default unit) which
          typically precedes a below average outcome value
        type: number
        format: float
  Update:
    required:
      - userId
      - connectorId
      - numberOfMeasurements
      - success
      - message
    properties:
      id:
        description: id
        type: integer
        format: int32
      userId:
        description: userId
        type: integer
        format: int32
      connectorId:
        description: connectorId
        type: integer
        format: int32
      numberOfMeasurements:
        description: numberOfMeasurements
        type: integer
        format: int32
      success:
        description: success
        type: boolean
      message:
        description: message
        type: string
      createdAt:
        description: >-
          When the record was first created. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
      updatedAt:
        description: >-
          When the record in the database was last updated. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
  UserVariable:
    required:
      - variableId
    properties:
      parentId:
        description: ID of the parent variable if this variable has any parent
        type: integer
        format: int32
      userId:
        description: User ID
        type: integer
        format: int32
      clientId:
        description: clientId
        type: string
      variableId:
        description: ID of variable
        type: integer
        format: int32
      defaultUnitId:
        description: ID of unit to use for this variable
        type: integer
        format: int32
      minimumAllowedValue:
        description: >-
          The minimum allowed value for measurements. While you can record a
          value below this minimum, it will be excluded from the correlation
          analysis.
        type: number
        format: float
      maximumAllowedValue:
        description: >-
          The maximum allowed value for measurements. While you can record a
          value above this maximum, it will be excluded from the correlation
          analysis.
        type: number
        format: float
      fillingValue:
        description: >-
          When it comes to analysis to determine the effects of this variable,
          knowing when it did not occur is as important as knowing when it did
          occur. For example, if you are tracking a medication, it is important
          to know when you did not take it, but you do not have to log zero
          values for all the days when you haven't taken it. Hence, you can
          specify a filling value (typically 0) to insert whenever data is
          missing.
        type: number
        format: float
      joinWith:
        description: >-
          The Variable this Variable should be joined with. If the variable is
          joined with some other variable then it is not shown to user in the
          list of variables
        type: integer
        format: int32
      onsetDelay:
        description: >-
          The amount of time in seconds that elapses after the
          predictor/stimulus event before the outcome as perceived by a
          self-tracker is known as the “onset delay”. For example, the “onset
          delay” between the time a person takes an aspirin (predictor/stimulus
          event) and the time a person perceives a change in their headache
          severity (outcome) is approximately 30 minutes.
        type: integer
        format: int32
      durationOfAction:
        description: >-
          The amount of time over which a predictor/stimulus event can exert an
          observable influence on an outcome variable’s value. For instance,
          aspirin (stimulus/predictor) typically decreases headache severity for
          approximately four hours (duration of action) following the onset
          delay.
        type: integer
        format: int32
      variableCategoryId:
        description: ID of variable category
        type: integer
        format: int32
      updated:
        description: updated
        type: integer
        format: int32
      public:
        description: Is variable public
        type: integer
        format: int32
      causeOnly:
        description: >-
          A value of 1 indicates that this variable is generally a cause in a
          causal relationship.  An example of a causeOnly variable would be a
          variable such as Cloud Cover which would generally not be influenced
          by the behaviour of the user
        type: boolean
      fillingType:
        description: '0 -> No filling, 1 -> Use filling-value'
        type: string
      numberOfMeasurements:
        description: Number of measurements
        type: integer
        format: int32
      numberOfProcessedDailyMeasurements:
        description: Number of processed measurements
        type: integer
        format: int32
      measurementsAtLastAnalysis:
        description: Number of measurements at last analysis
        type: integer
        format: int32
      lastUnitId:
        description: ID of last Unit
        type: integer
        format: int32
      lastOriginalUnitId:
        description: ID of last original Unit
        type: integer
        format: int32
      lastValue:
        description: Last Value
        type: number
        format: float
      lastOriginalValue:
        description: Last original value which is stored
        type: integer
        format: int32
      numberOfCorrelations:
        description: Number of correlations for this variable
        type: integer
        format: int32
      status:
        description: status
        type: string
      errorMessage:
        description: error_message
        type: string
      lastSuccessfulUpdateTime:
        description: When this variable or its settings were last updated
        type: string
        format: date-time
      standard_deviation:
        description: Standard deviation
        type: number
        format: float
      variance:
        description: Variance
        type: number
        format: float
      minimumRecordedValue:
        description: Minimum recorded value of this variable
        type: number
        format: float
      maximumRecordedDailyValue:
        description: Maximum recorded daily value of this variable
        type: number
        format: float
      mean:
        description: Mean
        type: number
        format: float
      median:
        description: Median
        type: number
        format: float
      mostCommonUnitId:
        description: Most common Unit ID
        type: integer
        format: int32
      mostCommonValue:
        description: Most common value
        type: number
        format: float
      numberOfUniqueDailyValues:
        description: Number of unique daily values
        type: number
        format: float
      numberOfChanges:
        description: Number of changes
        type: integer
        format: int32
      skewness:
        description: Skewness
        type: number
        format: float
      kurtosis:
        description: Kurtosis
        type: number
        format: float
      latitude:
        description: Latitude
        type: number
        format: float
      longitude:
        description: Longitude
        type: number
        format: float
      location:
        description: Location
        type: string
      experimentStartTime:
        description: >-
          Earliest measurement start_time to be used in analysis. Use UTC ISO
          8601 "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
      experimentEndTime:
        description: >-
          Latest measurement start_time to be used in analysis. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
      createdAt:
        description: >-
          When the record was first created. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
      updatedAt:
        description: >-
          When the record in the database was last updated. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
      outcome:
        description: >-
          Outcome variables (those with `outcome` == 1) are variables for which
          a human would generally want to identify the influencing factors.
          These include symptoms of illness, physique, mood, cognitive
          performance, etc.  Generally correlation calculations are only
          performed on outcome variables
        type: boolean
      sources:
        description: >-
          Comma-separated list of source names to limit variables to those
          sources
        type: string
      earliestSourceTime:
        description: Earliest source time
        type: integer
        format: int32
      latestSourceTime:
        description: Latest source time
        type: integer
        format: int32
      earliestMeasurementTime:
        description: Earliest measurement time
        type: integer
        format: int32
      latestMeasurementTime:
        description: Latest measurement time
        type: integer
        format: int32
      earliestFillingTime:
        description: Earliest filling time
        type: integer
        format: int32
      latestFillingTime:
        description: Latest filling time
        type: integer
        format: int32
      imageUrl:
        type: string
        description: ''
      ionIcon:
        type: string
        description: ''
  UserVariables:
    required:
      - user
      - variableId
    properties:
      user:
        type: integer
        description: User ID
      variableId:
        type: integer
        description: Common variable id
      durationOfAction:
        type: integer
        description: >-
          The amount of time over which a predictor/stimulus event can exert an
          observable influence on an outcome variable’s value. For instance,
          aspirin (stimulus/predictor) typically decreases headache severity for
          approximately four hours (duration of action) following the onset
          delay.
      fillingValue:
        type: integer
        description: >-
          When it comes to analysis to determine the effects of this variable,
          knowing when it did not occur is as important as knowing when it did
          occur. For example, if you are tracking a medication, it is important
          to know when you did not take it, but you do not have to log zero
          values for all the days when you haven't taken it. Hence, you can
          specify a filling value (typically 0) to insert whenever data is
          missing.
      joinWith:
        type: string
        description: joinWith
      maximumAllowedValue:
        type: number
        format: float
        description: >-
          The maximum allowed value for measurements. While you can record a
          value above this maximum, it will be excluded from the correlation
          analysis.
      minimumAllowedValue:
        type: number
        format: float
        description: >-
          The minimum allowed value for measurements. While you can record a
          value below this minimum, it will be excluded from the correlation
          analysis.
      onsetDelay:
        type: integer
        description: onsetDelay
      experimentStartTime:
        type: string
        description: >-
          Earliest measurement startTime that should be used in analysis. For
          instance, the date when you started tracking something.  Helpful in
          determining when to start 0 filling since we can assume the absence of
          a treatment measurement, for instance, indicates that the treatment
          was not applied rathter than simply not recorded.  Uses ISO string
          format
      experimentEndTime:
        type: string
        description: >-
          Latest measurement startTime that should be used in analysis. For
          instance, the date when you stopped tracking something.  Helpful in
          determining when to stop 0 filling since we can assume the absence of
          a treatment measurement, for instance, indicates that the treatment
          was not applied rathter than simply not recorded.   Uses ISO string
          format
      alias:
        type: string
        description: User-defined display alias for variable name
  ValueObject:
    required:
      - timestamp
      - value
    properties:
      timestamp:
        type: integer
        format: int64
        description: Timestamp for the measurement event in epoch time (unixtime)
      value:
        type: number
        format: double
        description: Measurement value
      note:
        type: string
        description: Optional note to include with the measurement
  Variable:
    required:
      - name
      - category
      - unitAbbreviatedName
      - abbreviatedUnitId
      - sources
      - minimumAllowedValue
      - maximumAllowedValue
      - combinationOperation
      - fillingValue
      - joinWith
      - joinedVariables
      - parent
      - subVariables
      - onsetDelay
      - durationOfAction
      - earliestMeasurementTime
      - latestMeasurementTime
      - updated
      - causeOnly
      - numberOfCorrelations
      - outcome
      - rawMeasurementsAtLastAnalysis
      - numberOfRawMeasurements
      - lastUnit
      - lastValue
      - mostCommonValue
      - mostCommonUnit
      - lastSource
    properties:
      id:
        type: integer
        description: Variable ID
      name:
        type: string
        description: User-defined variable display name.
      category:
        type: string
        description: >-
          Variable category like Mood, Sleep, Physical Activity, Treatment,
          Symptom, etc.
      unitAbbreviatedName:
        type: string
        description: Abbreviated name of the default unit for the variable
      abbreviatedUnitId:
        type: integer
        description: Id of the default unit for the variable
      sources:
        type: string
        description: >-
          Comma-separated list of source names to limit variables to those
          sources
      minimumAllowedValue:
        type: number
        format: double
        description: >-
          The minimum allowed value for measurements. While you can record a
          value below this minimum, it will be excluded from the correlation
          analysis.
      maximumAllowedValue:
        type: number
        format: double
        description: >-
          The maximum allowed value for measurements. While you can record a
          value above this maximum, it will be excluded from the correlation
          analysis.
      combinationOperation:
        type: string
        enum:
          - MEAN
          - SUM
        description: >-
          Way to aggregate measurements over time. Options are "MEAN" or "SUM".
          SUM should be used for things like minutes of exercise.  If you use
          MEAN for exercise, then a person might exercise more minutes in one
          day but add separate measurements that were smaller.  So when we are
          doing correlational analysis, we would think that the person exercised
          less that day even though they exercised more.  Conversely, we must
          use MEAN for things such as ratings which cannot be SUMMED.
      fillingValue:
        type: number
        format: double
        description: >-
          When it comes to analysis to determine the effects of this variable,
          knowing when it did not occur is as important as knowing when it did
          occur. For example, if you are tracking a medication, it is important
          to know when you did not take it, but you do not have to log zero
          values for all the days when you haven't taken it. Hence, you can
          specify a filling value (typically 0) to insert whenever data is
          missing.
      joinWith:
        type: string
        description: >-
          The Variable this Variable should be joined with. If the variable is
          joined with some other variable then it is not shown to user in the
          list of variables.
      joinedVariables:
        type: array
        items:
          $ref: '#/definitions/Variable'
        description: Array of Variables that are joined with this Variable
      parent:
        type: integer
        description: Id of the parent variable if this variable has any parent
      subVariables:
        type: array
        items:
          $ref: '#/definitions/Variable'
        description: Array of Variables that are sub variables to this Variable
      onsetDelay:
        type: integer
        description: >-
          The amount of time in seconds that elapses after the
          predictor/stimulus event before the outcome as perceived by a
          self-tracker is known as the “onset delay”. For example, the “onset
          delay” between the time a person takes an aspirin (predictor/stimulus
          event) and the time a person perceives a change in their headache
          severity (outcome) is approximately 30 minutes.
      durationOfAction:
        type: integer
        description: >-
          The amount of time over which a predictor/stimulus event can exert an
          observable influence on an outcome variable’s value. For instance,
          aspirin (stimulus/predictor) typically decreases headache severity for
          approximately four hours (duration of action) following the onset
          delay.
      earliestMeasurementTime:
        type: integer
        description: Earliest measurement time
      latestMeasurementTime:
        type: integer
        description: Latest measurement time
      updated:
        type: integer
        description: When this variable or its settings were last updated
      causeOnly:
        type: integer
        description: >-
          A value of 1 indicates that this variable is generally a cause in a
          causal relationship.  An example of a causeOnly variable would be a
          variable such as Cloud Cover which would generally not be influenced
          by the behaviour of the user.
      numberOfCorrelations:
        type: integer
        description: Number of correlations
      outcome:
        type: integer
        description: >-
          Outcome variables (those with `outcome` == 1) are variables for which
          a human would generally want to identify the influencing factors.
          These include symptoms of illness, physique, mood, cognitive
          performance, etc.  Generally correlation calculations are only
          performed on outcome variables.
      rawMeasurementsAtLastAnalysis:
        type: integer
        description: >-
          The number of measurements that a given user had for this variable the
          last time a correlation calculation was performed. Generally
          correlation values are only updated once the current number of
          measurements for a variable is more than 10% greater than the
          rawMeasurementsAtLastAnalysis.  This avoids a
          computationally-demanding recalculation when there's not enough new
          data to make a significant difference in the correlation.
      numberOfRawMeasurements:
        type: integer
        description: Number of measurements
      lastUnit:
        type: string
        description: Last unit
      lastValue:
        type: integer
        description: Last value
      mostCommonValue:
        type: integer
        description: Most common value
      mostCommonUnit:
        type: string
        description: Most common unit
      lastSource:
        type: integer
        description: Last source
      imageUrl:
        type: string
        description: ''
      ionIcon:
        type: string
        description: ''
  VariableCategory:
    required:
      - name
    properties:
      name:
        type: string
        description: Category name
  VariableNew:
    required:
      - name
      - category
      - unit
      - combinationOperation
      - parent
    properties:
      name:
        type: string
        description: User-defined variable display name.
      category:
        type: string
        description: >-
          Variable category like Mood, Sleep, Physical Activity, Treatment,
          Symptom, etc.
      unit:
        type: string
        description: Abbreviated name of the default unit for the variable
      combinationOperation:
        type: string
        enum:
          - MEAN
          - SUM
        description: >-
          Way to aggregate measurements over time. Options are "MEAN" or "SUM".
          SUM should be used for things like minutes of exercise.  If you use
          MEAN for exercise, then a person might exercise more minutes in one
          day but add separate measurements that were smaller.  So when we are
          doing correlational analysis, we would think that the person exercised
          less that day even though they exercised more.  Conversely, we must
          use MEAN for things such as ratings which cannot be SUMMED.
      parent:
        type: string
        description: Parent
  VariablesNew:
    type: array
    items:
      $ref: '#/definitions/VariableNew'
    description: New variables
  VoteDelete:
    required:
      - cause
      - effect
    properties:
      cause:
        type: string
        description: Cause variable name for the correlation to which the vote pertains
      effect:
        type: string
        description: Effect variable name for the correlation to which the vote pertains
  Vote:
    required:
      - clientId
      - userId
      - causeId
      - effectId
      - value
    properties:
      id:
        description: id
        type: integer
        format: int32
      clientId:
        description: clientId
        type: string
      userId:
        description: ID of User
        type: integer
        format: int32
      causeId:
        description: ID of the predictor variable
        type: integer
        format: int32
      effectId:
        description: ID of effect variable
        type: integer
        format: int32
      value:
        description: Value of Vote
        type: integer
        format: int32
      createdAt:
        description: >-
          When the record was first created. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
      updatedAt:
        description: >-
          When the record in the database was last updated. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
  VariableUserSource:
    required:
      - variableId
      - sourceName
      - timestamp
      - earliestMeasurementTime
      - latestMeasurementTime
    properties:
      userId:
        description: ID of User
        type: integer
        format: int32
      variableId:
        description: ID of variable
        type: integer
        format: int32
      sourceName:
        description: source
        type: string
      timestamp:
        description: >-
          Time that this measurement occurred Uses epoch minute (epoch time
          divided by 60)
        type: integer
        format: int32
      earliestMeasurementTime:
        description: Earliest measurement time
        type: integer
        format: int32
      latestMeasurementTime:
        description: Latest measurement time
        type: integer
        format: int32
      createdAt:
        description: >-
          When the record was first created. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
      updatedAt:
        description: >-
          When the record in the database was last updated. Use UTC ISO 8601
          "YYYY-MM-DDThh:mm:ss"  datetime format
        type: string
        format: date-time
securityDefinitions:
  quantimodo_oauth2:
    type: oauth2
    authorizationUrl: 'https://app.quantimo.do/api/v2/oauth/authorize'
    tokenUrl: 'https://app.quantimo.do/api/v2/oauth/token'
    flow: accessCode
    scopes:
      basic: 'Allows you to read user info (displayname, email, etc).'
      readmeasurements: Allows one to read a user's data
      writemeasurements: Allows you to write user data
  access_token:
    type: apiKey
    name: access_token
    in: query